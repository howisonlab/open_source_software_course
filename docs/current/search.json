[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Open Source Software Development: A socio-technical course",
    "section": "",
    "text": "Most up to date version at https://howisonlab.github.io/open_source_software_course/current/\nWelcome to the materials for a course on open source software development, taught at the School of Information at the University of Texas at Austin. The course is taught by James Howison, with contributions from a set of wonderful TAs, including Chongyan Chen.\nThe course was developed as an undergraduate version of a course on Peer Production: Open Source, Wikipedia, and Beyond.\nI call this a “socio-technical course” because I interleave social theory about open source (such as theories of motivation, approaches to governance, sources of lack of diversity) in among the technical skills needed to participate in open source projects (git and github commands, markdown, unit testing, packaging). This interleaving is inspired equally by Karl Fogel’s approach in Producing Open Source Software, and the intellectual traditions of Sociotechnical Systems, Sociomateriality, and the Consortium for the Science of Sociotechnical Systems (CSST).\nIn these materials I present these in two separate sequences: “insights” and “skills”. When I teach, though, I interleave them in what I hope are synergistic ways. For example, when teaching about coordination theory, the week includes the git and github approaches to managing dependencies (such as identifying and resolving conflicts, as well as branching). I pair literature on knowledge sharing up with skills to do it, such as understanding Markdown and referring to Issues/Commits. You can see this interleaving in the most recent syllabus at Section 2.1.\nThe course begins with a two-part physical in-class exercise: students fold paper planes, and share improvements. The first exercise addresses how patents and copyright affect sharing, building on each others work, and the division of claims. The second takes a more technical tack, and addresses management of versions and conflicts. These exercises give a physical analog for the topics in the course, giving a grounding for discussing intellectual concepts and git commands.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Open Source Software Development: A socio-technical course</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html",
    "href": "oss_syllabus.html",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "",
    "text": "2.1 Syllabus\nOfficial, updated version of syllabus always online at:\nhttps://howisonlab.github.io/open_source_software_course/current/oss_syllabus.html\nJump to Course Outline\nCourse\nI 320D and 320S: Open Source Software Development\n\n\n\n\nProfessor\nJames Howison\n\n\nMeeting Time\nMondays and Wednesdays 3:30 PM - 04:45 PM\n\n\nLocation\nSZB 3.508\n\n\nSemester\nSpring 2025\n\n\nUnique No.\n28190\n\n\nOffice Hours\nBy appointment booked at http://james.howison.name/calendar/\n\n\nContact Email\njhowison@ischool.utexas.edu\n\n\nTeaching Assistant\nWill Beason\n\n\nTA Office Hours Availability\nThursdays and Fridays 9am-3pm by appointment\n\n\nTA Office Hours Link\nhttps://calendly.com/beason-utexas/30min\n\n\nTA Contact Email\nwab773@eid.utexas.edu",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#learning-objectives",
    "href": "oss_syllabus.html#learning-objectives",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "3.1 Learning Objectives",
    "text": "3.1 Learning Objectives\nStudents will be able to:\n\nUnderstand what open source software is as an artifact\nUnderstand what is distinctive about the way that it is produced\nKnow how to interact with open source software projects\nKnow how the open source way has informed modern software development work (including in data science)\nConceptually distinguish open source from other organizational forms or phenomena, such as corporations, crowdsourcing, open access publishing, and communities of practice.\nReason about how, why, and when open source peer production works (and when it does not!)\nEngage critically with published research and popular discourse about open source\n\nPractically students will be able to:\n\nInstall and use git to manage versions in their own work\nParticipate in github hosted peer production (making and receiving pull requests)\nCreate and publish documents in markdown and wikitext format\nAsk technical questions that people want to answer\nAnalyze trace data from open source software projects",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#assessments",
    "href": "oss_syllabus.html#assessments",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "3.2 Assessments",
    "text": "3.2 Assessments\n\n\n\n\n\n\nAssignment\nPercentage of Course Grade\nDue Date\n\n\n\n\nClass Participation (discussion and activites)\n15%\nThroughout course\n\n\nWeekly Homework challenges\n40%\nWeekly homework challenges throughout the semester\n\n\nGit Analogies Paper\n20%\nWeek after Spring Break\n\n\nOpen Source Trace Data analysis Project report\n25%\nStart of last class week.\n\n\n\n\n\n\n\n\nThere is no final exam for this course. 100-90:A, 90 &gt; grade &gt; 85: A-, 85 &gt; grade &gt; 80 B- and so on.\n\n3.2.1 Participation in class discussion and activities\nStudents are expected to attend class and to participate in discussion and activities. Students should email the professor prior to class if they cannot make it. Material throughout the course builds on earlier material (both technical and conceptual). If you cannot make class you should refer to the online materials first and then consult with your classmates. Office hours are not for personal replays of teaching, nor can they compensate for not participating in discussion.\nHints on participation:\n\nUseful participation can come from asking questions if you don’t understand the point someone is making. If you have questions, very likely others do to.\nYou can also summarize discussion which helps everyone by giving them something to test their understanding of the discussion.\nYou can challenge or disagree with people, sometimes that can be introducing a counter-example or questioning whether evidence really means what the speaker originally thought.\nI really welcome examples from your own experience. For example if there is an organization, movement, or line of thought (modern/traditional) in your culture that relates to open source development, I would love that to be part of the discussion.\n\n\n\n3.2.2 Weekly Homework Challenges\nThe course will have assignments based on bth insight and skills topics we are learning (with some leaning towards skills), including use of the DataCamp course (see below).\n\n\n3.2.3 Papers and Projects\n\n3.2.3.1 Analogies paper\nHow would you explain what we have been learning about git to your future work teammates?\nIn this assignment you will describe three different analogies for git-based collaboration (including branching, GitHub, and PRs). No more than two analogies can be found online (use references!), at least one you must create yourself. Each analogy should cover as much of git and GitHub collaboration as possible.\nFor each, include both text and pictures. You should have approximately 2 pages per analogy (~500-750 words). Pictures can be photos you find online, or diagrams you create yourself (digital collage can be useful). You should include connections between your analogy and the specific git and GitHub commands we have learned (e.g., init, add, commit, push, pull, create PR, merge, etc.). In particular, you must include a discussion of “splitting a pull request” including git cherry-pick. Your analogies should cover multiple commands (not a one analogy for one command); each should cover as much of git and GitHub collaboration as possible.\nIn a final 1-2 pages of writing (~350-750 words), Compare and contrast your three analogies in reference to this question: How would each analogy help your teammates? What might it make clear, what might it hide or obfuscate? How might using a combination of your analogies help? Could that combination make things more difficult?\nYour paper must be submitted as a PR (will be taught in the course).\nInclude a note at the top of the file telling me which formal citation approach you are using (e.g., APA, MLA, etc). Students are cautioned that as a scholarly paper proper citation and use of sources is required otherwise students will face academic misconduct proceedings. See UTexas materials on Academic Integrity at https://deanofstudents.utexas.edu/conduct/academicintegrity.php\nGenAI: For this assignment, I give you specific permission to use GenAI systems like ChatGPT. The requirement, however, is that you must include the sequence of prompts you used, your analysis of the analogy provided by the system, discuss how you adapted the analogy for presentation in the paper, and how you added images/diagrams (as well as including this analogy in your compare and contrast).\nThe structure of the paper should be as follows (a page is ~300-500 words):\n# Introduction (~ 1-2 paragraphs/100-200 words)\n\n# Analogy 1 (~1 page including images/~500 words)\n\n# Analogy 2 (~1 page including images/~500 words)\n\n# Analogy 3 (~1 page including images/~500 words)\n\n# Compare and Contrast Analogies (1-2 pages of writing, ~350-750 words).\n\n# References (excluded from any word counts).\n\n\n3.2.3.2 Final Paper or project\nPick one of the following two options:\n\nConduct a trace data analysis that compares at least 3 projects contained in this provided dataset:\n\nhttps://github.com/howisonlab/transition_augur/raw/main/oss_data.zip\nThe code used to pull these data is here: https://github.com/howisonlab/transition_augur\nThe ER diagram for the underlying data is linked in the notebook in that repo.\nThese are open source projects funded by the US National Science Foundation during the last decade in a program called SI2. The data is collected from GitHub using the augur project from Linux Foundation. The files when unzipped are quite large, commits.csv has over 4.5million rows. You will not be able to work with these files in Excel (for example) but they should work ok with tools like Tableau or Pandas/Matplotlib.\nYour analysis should use the trace data collected to address insight concepts that we have discussed during the course, for example: Leadership, Coordination, Motivation, Dependency (including interdependency), Governance, Bias and lack of diversity. You should provide figures (most likely multiple time-series analyses) and you must relate your work to either a discussion in the book http://producingoss.com/ or a trace data analysis of open source data you find in the peer reviewed literature. One suggested source is the the Mining Software Repositories conference: http://www.msrconf.org/ Your project document should include multiple figures and ~300-500 words of writing. Think the equivalent of about 3 pages.\n\nWrite a 1,000-1,500 word scholarly comparative analysis of 3 open source projects that connect with your interests. Explain why you chose these three projects to compare. You should include in your discussion topics such as: leadership, collaboration, license choice, ownership, contribution process, how the project seeks to attract contributions, how the project uses collaboration infrastructure. You must include screenshots and you must discuss at least one PR for each project (of course you can discuss more). You should reference literature from the course and connect with the discussion in at least two additional peer reviewed articles. You may find these two review articles a useful place to identify relevant literature: https://doi.org/10.1145/2089125.2089127 or https://www.misqresearchcurations.org/blog/2021/12/7/information-systems-development\n\nSubmission:\nSubmit by making a PR. Note that it should be a separate PR from other assignment submissions; this means you must use a different branch name for this work.\nInclude a note at the top of the file telling me which formal citation approach you are using (e.g., APA, MLA, etc). Students are cautioned that as a scholarly paper proper citation and use of sources is required otherwise students will face academic misconduct proceedings. See “Academic Integrity” presentation if at all unsure.\n\n\n\n3.2.4 Late submission policy\nThe late policy for papers/projects/presentation is a 10% reduction (minimum one point) for submissions up to 24 hours after the due time, but zero points after that. If assignment answers are discussed in class, submissions will not be accepted after. You can, of course, contact me if you have an emergency.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#materials",
    "href": "oss_syllabus.html#materials",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "3.3 Materials",
    "text": "3.3 Materials\nThere are no required texts for this course and no materials to purchase.\nReadings, tutorials, and will be provided via pages linked from the class calendar below.\nI will enroll the class in DataCamp, giving students free access to the DataCamp courses (including their premium courses). In particular we will be using their interactive course on git during classes in the first half of the course. I encourage students to explore their other course options during the semester.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#draft-course-schedule",
    "href": "oss_syllabus.html#draft-course-schedule",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "4.1 Draft Course Schedule",
    "text": "4.1 Draft Course Schedule\nTable below shows classes and topics planned. Each class has both an insight (aka theory, conceptual) and a skills (aka tech, practical) component. These will become links to materials for the class.\n\n\n\n\n\n\n\nFirst Class\n\n\n\n\nSecond Class\n\n\n\n\n\nWeek\n\n\nDay\n\n\nModule\n\n\nTopic\n\n\nDay\n\n\nModule\n\n\nTopic\n\n\n\n\n\n\n2\n\n\nMon Jan 13\n\n\nInsights\n\n\nSyllabus Review & Paper Planes and Innovation Section 3.1\n\n\nWed Jan 15\n\n\nNo Meeting\n\n\nNo meeting: Instructor travel\n\n\n\n\n3\n\n\nMon Jan 20\n\n\nNo Meeting\n\n\nNo meeting: MLK day\n\n\nWed Jan 22\n\n\nSkills\n\n\nPaper Planes: Version Control Chapter 13 git add, commit via paper planes and tables\n\n\n\n\n4\n\n\nMon Jan 27\n\n\nInsights\n\n\nWhat is open source? Chapter 4\n\n\nWed Jan 29\n\n\nSkills\n\n\nGit basic workflow Chapter 14 git add, commit (locally)\n\n\n\n\n5\n\n\nMon Feb 03\n\n\nInsights\n\n\nMotivations and Asking questions people want to answer Chapter 5\n\n\nWed Feb 05\n\n\nSkills\n\n\nRewinding work Chapter 15 revert, other undos, checking out old versions, rewriting history\n\n\n\n\n6\n\n\nMon Feb 10\n\n\nInsights\n\n\nLicenses Chapter 6\n\n\nWed Feb 12\n\n\nSkills\n\n\nBranching Chapter 16 git checkout, merge.\n\n\n\n\n7\n\n\nMon Feb 17\n\n\nInsights\n\n\nCoordination Chapter 7\n\n\nWed Feb 19\n\n\nSkills\n\n\nSharing and collaborating via github Chapter 17 git clone, remote, push\n\n\n\n\n8\n\n\nMon Feb 24\n\n\nInsights\n\n\nGovernance and decision making Chapter 8\n\n\nWed Feb 26\n\n\nSkills\n\n\nCollaboration conflicts and workflows Chapter 18 github fork, pull request, pull upstream\n\n\n\n\n9\n\n\nMon Mar 03\n\n\nInsights\n\n\nExamining Real World Projects Chapter 9\n\n\nWed Mar 05\n\n\nSkills\n\n\nSplitting PRs Chapter 19 merge, conflicts, mark resolved, cherrypick, collaboration workflows \n\n\n\n\n10\n\n\nMon Mar 10\n\n\nInsights\n\n\nBias and lack of diversity Chapter 10\n\n\nWed Mar 12\n\n\nSkills\n\n\nRebase Chapter 20 git rebase\n\n\n\n\n11\n\n\nMon Mar 17\n\n\nNo Meeting\n\n\nNo meeting: Spring Break\n\n\nWed Mar 19\n\n\nNo Meeting\n\n\nNo meeting: Spring Break\n\n\n\n\n12\n\n\nMon Mar 24\n\n\nInsights\n\n\nIterative Development, Tests, and Continuous Integration Chapter 12\n\n\nWed Mar 26\n\n\nSkills\n\n\nTests Chapter 21 pytest\n\n\n\n\n13\n\n\nMon Mar 31\n\n\nInsights\n\n\nThe stack and the stream Chapter 11\n\n\nWed Apr 02\n\n\nSkills\n\n\nContinuous Integration Chapter 22 Github Actions\n\n\n\n\n14\n\n\nMon Apr 07\n\n\nInsights\n\n\nCybersecurity and open source\n\n\nWed Apr 09\n\n\nSkills\n\n\nCreating and distributing packages Chapter 23 python packages, pypy pinning\n\n\n\n\n15\n\n\nMon Apr 14\n\n\nInsights\n\n\nOpen software work in science and research\n\n\nWed Apr 16\n\n\nSkills\n\n\nFinal paper/project workshop markdown\n\n\n\n\n16\n\n\nMon Apr 21\n\n\nInsights\n\n\nPeer production in Art and Culture\n\n\nWed Apr 23\n\n\nSkills\n\n\nFinal paper/project workshop markdown\n\n\n\n\n17\n\n\nMon Apr 28\n\n\nInsights\n\n\nWhat’s Next? (likely industry speaker)\n\n\nNA\n\n\nNA\n\n\nNA",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#skills-readings",
    "href": "oss_syllabus.html#skills-readings",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "4.2 Skills Readings",
    "text": "4.2 Skills Readings",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#insight-readings",
    "href": "oss_syllabus.html#insight-readings",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "4.3 Insight Readings",
    "text": "4.3 Insight Readings\nOften I can link directly to websites or PDFs, but sometimes I will provide links to articles in journals etc. You must be able to get the article through the library, generally speaking using the web VPN is the most convenient approach. Another option that can sometimes work is UnPaywall which works to find an open access article version when looking at a publisher’s page for the article.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#class-recordings",
    "href": "oss_syllabus.html#class-recordings",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.1 Class Recordings",
    "text": "5.1 Class Recordings\nClass Recordings: Class recordings are reserved only for students in this class for educational purposes and are protected under FERPA. The recordings should not be shared outside the class in any form. Violation of this restriction by a student could lead to Student Misconduct proceedings. Guidance on public access to class recordings can be found here.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#academic-integrity",
    "href": "oss_syllabus.html#academic-integrity",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.2 Academic Integrity",
    "text": "5.2 Academic Integrity\nEach student in the course is expected to abide by the University of Texas Honor Code: “As a student of The University of Texas at Austin, I shall abide by the core values of the University and uphold academic integrity.” Plagiarism is taken very seriously at UT. Therefore, if you use words or ideas that are not your own (or that you have used in previous class), you must cite your sources. Otherwise you will be guilty of plagiarism and subject to academic disciplinary action, including failure of the course. In particular, students are reminded that proper citation requires mentioning sources when you use them, not just in a general list of references at the end of a document. You are responsible for understanding UT’s Academic Honesty and the University Honor Code which can be found at the following web address: http://deanofstudents.utexas.edu/sjs/acint_student.php",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#student-rights-and-responsibilities",
    "href": "oss_syllabus.html#student-rights-and-responsibilities",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.3 Student rights and responsibilities",
    "text": "5.3 Student rights and responsibilities\n\nYou have a right to a learning environment that supports mental and physical wellness.\nYou have a right to respect.\nYou have a right to be assessed and graded fairly.\nYou have a right to freedom of opinion and expression.\nYou have a right to privacy and confidentiality.\nYou have a right to meaningful and equal participation, and to self-organize groups to improve your learning environment.\nYou have a right to learn in an environment that is welcoming to all people. No student shall be isolated, excluded or diminished in any way.\n\nWith these rights come responsibilities:\n\nYou are responsible for taking care of yourself, managing your time, and communicating with the teaching team and with others if things start to feel out of control or overwhelming.\nYou are responsible for acting in a way that is worthy of respect and always respectful of others.\nYour experience with this course is directly related to the quality of the energy that you bring to it, and your energy shapes the quality of your peers’ experiences.\nYou are responsible for creating an inclusive environment and for speaking up when someone is excluded. In particular, you are responsible for ensuring that your participation does not exclude the participation of others. Office hours are available for in-depth further discussion of advanced topics or other interests that pursuing in depth during class would exclude others.\nYou are responsible for holding yourself accountable to these standards, holding each other to these standards, and holding the teaching team accountable as well.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#personal-pronoun-preference",
    "href": "oss_syllabus.html#personal-pronoun-preference",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.4 Personal Pronoun Preference",
    "text": "5.4 Personal Pronoun Preference\nProfessional courtesy and sensitivity are especially important with respect to individuals and topics dealing with differences of race, culture, religion, politics, sexual orientation, gender, gender variance, and nationalities. Class rosters are provided to the instructor with the student’s legal name. I will gladly honor your request to address you by an alternate name or gender pronoun. Please advise me of this preference early in the semester so that I may make appropriate changes to my records.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#dei-in-classroom-discussions",
    "href": "oss_syllabus.html#dei-in-classroom-discussions",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.5 DEI in classroom discussions",
    "text": "5.5 DEI in classroom discussions\nTexas Senate Bill 17, the recent law that outlaws diversity, equity, and inclusion programs at public colleges and universities in Texas, does not in any way affect content, instruction or discussion in a course at public colleges and universities in Texas. Expectations and academic freedom for teaching and class discussion have not been altered post-SB 17, and students should not feel the need to censor their speech pertaining to topics including race and racism, structural inequality, LGBTQ+ issues, or diversity, equity, and inclusion.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#drop-policy",
    "href": "oss_syllabus.html#drop-policy",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.6 Drop Policy",
    "text": "5.6 Drop Policy\nIf you want to drop a class after the 12th class day, you’ll need to execute a Q drop before the Q-drop deadline, which typically occurs near the middle of the semester. Under Texas law, you are only allowed six Q drops while you are in college at any public Texas institution. For more information, see: http://www.utexas.edu/ugs/csacc/academic/adddrop/qdrop\nInternational students must meet with the international office before dropping a class that would put them below full-time status. Although it is worth noting that there are legitimate reasons that allow International students to be below full-time status, so if you think you are failing a course (or just performing below your expectations) don’t make assumptions either way, speak with the international office to discover your options.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "oss_syllabus.html#university-resources-for-students",
    "href": "oss_syllabus.html#university-resources-for-students",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.7 University Resources for Students",
    "text": "5.7 University Resources for Students\nYour success in this class is important to me. We will all need accommodations at different times because we all learn differently. If there are aspects of this course that prevent you from learning or exclude you, please let me know as soon as possible. Together we’ll develop strategies to meet both your needs and the requirements of the course. There are also a range of resources on campus, detailed below.\n\n5.7.1 Accessible/Compliant Statement:\nIf you are a student with a disability, or think you may have a disability, and need accommodations please contact Disability and Access (D&A). You may refer to D&A’s website for contact and more information: http://diversity.utexas.edu/disability/. If you are already registered with D&A, please deliver your Accommodation Letter to me as early as possible in the semester so we can discuss your approved accommodations.\n\n\n5.7.2 Accessible, Inclusive, and Compliant Statement:\nThe university is committed to creating an accessible and inclusive learning environment consistent with university policy and federal and state law. Please let me know if you experience any barriers to learning so I can work with you to ensure you have equal opportunity to participate fully in this course. If you are a student with a disability, or think you may have a disability, and need accommodations please contact Disability and Access (D&A). Please refer to D&A’s website for contact and more information: http://diversity.utexas.edu/disability/. If you are already registered with D&A , please deliver your Accommodation Letter to me as early as possible in the semester so we can discuss your approved accommodations and needs in this course.\n\n\n5.7.3 Counseling and Mental Health Center\nAll of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful.\nIf you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. http://www.cmhc.utexas.edu/individualcounseling.html\n\n\n5.7.4 The Sanger Learning Center\nAll students, including graduate students, are welcome to take advantage of Sanger Center’s classes and workshops, private learning specialist appointments, peer academic coaching, and tutoring for more than 70 courses in 15 different subject areas. For more information, please visit https://ugs.utexas.edu/slc/grad or call 512-471-3614 (JES A332).\n\n\n5.7.5 University Writing Center free programs for grad students\n\n\n5.7.6 Libraries\n\n\n5.7.7 IT services\n\n\n5.7.8 Student Emergency Services\n\n\n5.7.9 Important Safety Information\nIf you have concerns about the safety or behavior of fellow students, TAs or Professors, call BCAL (the Behavior Concerns Advice Line): 512-232-5050. Your call can be anonymous. If something doesn’t feel right—it probably isn’t. Trust your instincts and share your concerns.\nThe following recommendations regarding emergency evacuation from the Office of Campus Safety and Security, 512-471-5767, http://www.utexas.edu/safety/\nOccupants of buildings on The University of Texas at Austin campus are required to evacuate buildings when a fire alarm is activated. Alarm activation or announcement requires exiting and assembling outside.\n\nFamiliarize yourself with all exit doors of each classroom and building you may occupy. Remember that the nearest exit door may not be the one you used when entering the building.\nStudents requiring assistance in evacuation shall inform their instructor in writing during the first week of class.\nIn the event of an evacuation, follow the instruction of faculty or class instructors. Do not re-enter a building unless given instructions by the following: Austin Fire Department, The University of Texas at Austin Police Department, or Fire Prevention Services office.\nLink to information regarding emergency evacuation routes and emergency procedures can be found at: http://www.utexas.edu/emergency",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syllabus for Open Source Software Development</span>"
    ]
  },
  {
    "objectID": "insights/paper_plane_innovation.html",
    "href": "insights/paper_plane_innovation.html",
    "title": "3  Paper planes as an analogy for peer production",
    "section": "",
    "text": "3.1 Exercise 1: Paper Planes and Innovation\nThis exercise is part one of two.\nBoth have students folding paper planes as an analogy for (potentially) collaborative work.\nThis first exercise focuses on collaborative innovation. It is designed to make concrete the idea of sharing work and building on the designs of others. Designs are expressed as both artifacts (planes) and source code (instructions). It gradually introduces the role that intellectual property can play (patents and copyright) and thus motivates open source licences.\nThe second exercise focuses on version control. It is designed to make concrete the basics of git repositories and collaboration. The exercise introduces the idea of working spaces and repositories. The work continues to be making changes to paper planes, and different versions are placed on trays to be stored (as numbered versions) in the repository. We progress from individual work in the repository, to more than one person contributing to the repository. That enables us to introduce the idea of synchronizing with a shared repository. Currently the exercises ends with identifying and resolving a conflict.\nMaterials needed:",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Paper planes as an analogy for peer production</span>"
    ]
  },
  {
    "objectID": "insights/paper_plane_innovation.html#sec-paper-planes-and-innovation",
    "href": "insights/paper_plane_innovation.html#sec-paper-planes-and-innovation",
    "title": "3  Paper planes as an analogy for peer production",
    "section": "",
    "text": "copier paper (for folding and writing)\nblack, blue, red pens.\n\n\n3.1.1 Can we copy a paper plane?\nEveryone in the class should take some paper and create a paper airplane, writing their name somewhere.\nThe class will then line up on one side and see whose plane gets closest to the other wall.\nThe instructor will designate the closest plane as the “Advanced Design”.\nEveryone returns to seats and instructor shows the “Advanced Design” on the document camera.\nQuestion for writing:\n\nAre other students in the class allowed to copy this design? Why or why not?\n\nShould they be allowed?\nHow does this choice affect innovation and invention in the world?\n\nDiscuss with partners.\n\n\n3.1.2 Instructions for building a plane\nWe will make a new assumption: we can only build a plane by following written instructions.\nEveryone in the class should create instructions for building their plane. Include about 3 steps.\nThe instructions for the “Advanced Design” get shown on the document camera.\nQuestion:\n\nCan other students copy the additional “Advanced Design” steps? Why or why not?\n\n\n\n3.1.3 A million dollar competition\nGroups of six (3 pairs): 1. Originator and folder 2. Improver1 and folder 3. Improver2 and folder\n\nOriginator passes their basic plane instructions (black ink) to their folder.\nOriginator makes a copy of their instructions, hands to Improver1.\nImprover1 copies Originator’s instructions, adding a step in red pen.\n\nImprover1 hands to their folder, then makes a copy for Improver2.\nImprover2 makes an edit (in blue pen), passes to their Folder.\n\nWe should end up with three designs and three planes.\nImagine a competition with a prize of one million dollars. All three designs are entered.\nQuestion for writing:\n\nIf the originator wins, who should get the money? Why?\nIf Improver2 wins, who should get the money? Why? What ratios seem fair to you?\n\nNow further imagine a global series of competitions, with lots of opportunities to win millions of dollars. And Improver2’s design is the best. They can’t make all the competitions themselves, so they decide to license their design such that anyone can use it, but they have to pay $10,000 for each competition.\nQuestion for writing:\n\nDo you think this is fair? Why or why not?\nDo you think this is legal?\nThe originator asks Improver2 for their design. Should Improver2 have to give it to the Originator? What about Improver1? Should they also get a free copy?\nHow do you think these situations impact invention and innovation? In what ways might it help and in what ways might it hurt?",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Paper planes as an analogy for peer production</span>"
    ]
  },
  {
    "objectID": "insights/what_is_open_source.html",
    "href": "insights/what_is_open_source.html",
    "title": "4  Introduction: What is open source?",
    "section": "",
    "text": "4.1 Readings prior to class:",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction: What is open source?</span>"
    ]
  },
  {
    "objectID": "insights/what_is_open_source.html#readings-prior-to-class",
    "href": "insights/what_is_open_source.html#readings-prior-to-class",
    "title": "4  Introduction: What is open source?",
    "section": "",
    "text": "Nadia Eghbal. (2020, December 3). The Making and Maintenance of our Open Source Infrastructure | Nadia Eghbal. https://www.youtube.com/watch?v=5wLKnN3To-k?start=2:00. Watch through ~8:00m.\nRichard Stallman. (2001, May 29). Richard M. Stallman’s speech: “Free Software: Freedom and Cooperation” [Speech Transcript]. https://www.gnu.org/philosophy/rms-nyu-2001-transcript.txt\nVICE (Director). (2020, March 3). Farmers Are Hacking Their Tractors Because of a Repair Ban. https://www.youtube.com/watch?v=EPYy_g8NzmI\niFixit (2022) What Right to Repair Looks like for Manufacturers.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction: What is open source?</span>"
    ]
  },
  {
    "objectID": "insights/what_is_open_source.html#where-is-open-source",
    "href": "insights/what_is_open_source.html#where-is-open-source",
    "title": "4  Introduction: What is open source?",
    "section": "4.2 Where is open source?",
    "text": "4.2 Where is open source?\nOpen source is everywhere.\nFamous pieces of open source software:\n\nFirefox browser\nZotero reference manager\nThe pandas data manipulation framework\n\nOften it is fairly hidden from end users. This can be because it is running on servers (and not installed by end-users), such as\n\nApache httpd\npostman\n\nSometimes it is just underneath a proprietary layer, such as\n\nChromium (underlies Chrome)\nVS Codium (underlies Microsoft’s VS Code)\n\nOften it is well ‘below the surface’ deeper in the dependencies.\n\nWindows (many, many components, famously the internet stack)\nMacOS (Darwin kernel)\nTableau (many components, see https://www.tableau.com/blog/tableau-and-open-source-advantage)\nSnowflake (Apache Arrow)\n\nOpen source is everywhere:\n\nLaptops\nPhones\nServers\nInternet routers (email, BGP)\nWifi routers\nCars, Radios, Watches, Batteries\nhttps://thenewstack.io/the-open-source-lesson-of-the-linksys-wrt54g-router/\nDatascience software.\nhttps://posit.co/products/open-source/rstudio/\nhttps://jupyter.org/governance/projectlicense.html",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction: What is open source?</span>"
    ]
  },
  {
    "objectID": "insights/what_is_open_source.html#what-is-source",
    "href": "insights/what_is_open_source.html#what-is-source",
    "title": "4  Introduction: What is open source?",
    "section": "4.3 What is “source”?",
    "text": "4.3 What is “source”?\n\n\n\n\n\n\n\n\nthing\nexample\nartifact\nsource\n\n\n\n\nSoftware\nMini Motorways\nDownloadable App\nCode (e.g., C, Java, Python)\n\n\nWeb Page\nhttp://james.howison.name/index.html\nRendered page on screen\nHTML (plus CSS, plus JavaScript)\n\n\nGraphics card\nAMD GTX1080ti\nthe physical card\nGerber file\n\n\nMovie\nCaptain America\n.mov file\n...\n\n\nScientific Paper\n...\nA pdf\n...\n\n\nA building\n...\n...\n...\n\n\n\n\n\n\n\nThe source is what is needed to build the artifact, what is created in the process of creation, and what is needed to make changes in an artifact.\nColfer and Baldwin talk about open source as having “actionable transparency”; we can see the source … but we can also take action with the source.\nActivity/Discussion:\n\nWork with the table above:\n\n\nFill out the missing cells in the table above.\nAdd a line for the thing assigned to your group.\nAdd two further lines you as a group make up.\n\n\nDiscuss: Beyond the stuff of source, what else is needed for open collaboration?",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction: What is open source?</span>"
    ]
  },
  {
    "objectID": "insights/what_is_open_source.html#why-open-source",
    "href": "insights/what_is_open_source.html#why-open-source",
    "title": "4  Introduction: What is open source?",
    "section": "4.4 Why open source?",
    "text": "4.4 Why open source?\n\n4.4.1 For the right to repair\nThe readings focused on this, highlighting current challenges in repair. You read about farmers who purchase John Deere farm equipment. Many want to be able to work on their equipment on their own, right on the farm. This is both because they are at a great distance from dealers, the equipment is expensive to transport, and they have paid a lot for the equipment and object to paying more to keep it working.\nIn many ways this is the same situation that Richard Stallman (founder of the Free Software Foundation) faced when dealing with the printer in his office. This is one of the foundational stories of the free software movement.\nHave you faced issues in trying to repair something? What prevented you?\nDiscussion: what is needed to repair a blender? A car? A list sorting algorithm? A web-page?\nWhat role does source code play? What else is needed?\n\n\n4.4.2 To avoid “proprietary lock in”\nThe popularity of open source can be understand as a kind of software escrow. Producers of tools want their users to rely on the tool, but if the code is hidden then a user is taking on a significant risk. That is is that the software stops getting updated because the company disappears. This means that maintenance stops, which means that the code suffers “bit rot” or “code collapse”.\n“Code collapse” occurs when software is not maintained. Not only do new features not appear, but security holes can be discovered which cannot be fixed. More subtly the code gets out of sync with its ecosystem, so that the way it talks to other software might stop working as other software is updated. If something changes in the software requirements (e.g., a change in the tax code) then the software cannot be updated.\nSo the buyer of proprietary software want an assurance that the software will continue to be updated, but no firm can assure its customers that it will be around for ever. To solve this purchasers used an approach called “Software Escrow”. Escrow means using a 3rd party (not the firm buying the software and not the firm building the software) to keep a copy of the software delivered. That escrow agent keeps that code secret unless specific events occurs, such as the software producer going out of business or discontinuing the product. In those cases the firm buying the code gets the source (and a license to use it). Escrow is a sort of insurance policy to help make relying on other people less risky.\nOpen source shares some of these characteristics. When building on someone else’s code, knowing it is open source means that the user can be sure they can taken over maintenance, even if the original developers stop working on the project.\n\n\n4.4.3 Shared maintenance of infrastructure\nWhen organizations compete with each other they want you to purchase their product, and not the product of their competitor. To purchase “Extra” brand chewing gum, and not “Trident” brand.\nYet much of the effort that goes into producing a product is spent on things that are not directly related to the product they are selling. Think of things like the supply of office furniture, the repainting of lines in the parking lot. These sort of efforts are known as “infrastructure”.\nIn many cases infrastructure is purchased from other companies, known as “contracting” or “out-sourcing”. The general logic is that companies that specialize in office furniture will do a better and cheaper job than if the chewing gum company was to make (or even buy) its own furniture. For example, Economics of scale mean that the outsourced furniture company can get bulk purchase discounts and pass them on to customers. They can also have full time people focused on monitoring safety issues with furniture and be responsible for fixing or replacing chairs that might injure people, saving the chewing gum company from lawsuits for dangerous chairs.\nMany users of open source are using open source software in the same way. For example IBM had a product called “WebSphere” which they sold to firms to run their “intranet” (internal corporate network publishing information or managing business processes). IBM originally wrote and maintained their own web server (as well as the application software that ran on top of it). Eventually, though, they changed to using the open source web server called Apache httpd. They argued that this saved them a lot of time maintaining their own infrastructure internally.\nIBM even started contributing changes that it needed or were helpful to their product back to httpd. They could have kept those changes secret, but then they would just have more infrastructure to maintain. Instead, they reasoned, they would contribute those changes back to httpd, effectively giving that work to their competitors (and everyone), but in return they received a lot more eyeballs on that code, ensuring that it was better tested and kept in sync.\nThey shared the cost of maintenance on the infrastructure to concentrate effort on their “secret sauce” of the WebSphere application layer, which was the thing that customers were really buying from them.\n\n\n4.4.4 The smartest people don’t work for you\nEach firm competes to hire great people. Yet it is unreasonable to think that you will have all the best people in the world working at your organization. For this reason firms seek to access outside intelligence. Sometimes this is possible through outsourcing, but other times problems are quite specific and require engagement with information or requirements that are quite specific to the business.\nBill Joy (from Sun Microsystems)is credited with the saying,\n\n“no matter who you are, most of the smartest people work for someone else,\n\nFirms therefore wna to access those smart people. Various approaches help, including “Crowdsourcing,” “innovation contests,” and “thought leadership” (publishing white papers and blogs that are discussed in public and then watching the discussion).\nOpen source projects are another place where expert outsiders can be found and engaged on topics of importance to firms.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction: What is open source?</span>"
    ]
  },
  {
    "objectID": "insights/what_is_open_source.html#why-is-open-source-interesting",
    "href": "insights/what_is_open_source.html#why-is-open-source-interesting",
    "title": "4  Introduction: What is open source?",
    "section": "4.5 Why is open source interesting?",
    "text": "4.5 Why is open source interesting?\nOpen source is interesting to a wide group of thinkers, both academics and thinkers in business and software.\n\nOpen source is successful. Almost all software has a foundation of open source, and open source tools successfully compete with proprietary software.\nThat success is unexpected. Why “give it away”, why “work for free”?\nOpen source (and Free Software) are politically engaged, holding the belief that they can changed the world through openness and freedom. Those building openly find this an emancipatory experience that they want to share with others (see Dunbar-Hestor’s “Hacking Diversity” book)\nOpen source is the leading edge of distributed work. Open source is done online, with participants that often don’t know each other and are all around the world. All the issues of remote work were encountered first in open source, which has developed interesting approaches to these problems.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction: What is open source?</span>"
    ]
  },
  {
    "objectID": "insights/what_is_open_source.html#topics-to-be-covered",
    "href": "insights/what_is_open_source.html#topics-to-be-covered",
    "title": "4  Introduction: What is open source?",
    "section": "4.6 Topics to be covered",
    "text": "4.6 Topics to be covered\n\nMotivations for participation\nLicences\nCoordination\nGovernance\nBias and lack of diversity\nSoftware collapse, packaging and dependencies\nContinuous Integration",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction: What is open source?</span>"
    ]
  },
  {
    "objectID": "insights/motivations.html",
    "href": "insights/motivations.html",
    "title": "5  Motivations",
    "section": "",
    "text": "5.1 Readings",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Motivations</span>"
    ]
  },
  {
    "objectID": "insights/motivations.html#readings",
    "href": "insights/motivations.html#readings",
    "title": "5  Motivations",
    "section": "",
    "text": "Raymond, E. S. and Moen, R. (2001). How to ask questions the smart way.\nTwo articles on how people became maintainers of ggplot2/tidyverse data science tools.\n\nJoining ggplot2\nBecoming The Intern; now project lead\n\n5m youtube video. Linus Torvalds talking about finding Kernel maintainers",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Motivations</span>"
    ]
  },
  {
    "objectID": "insights/motivations.html#how-to-ask-questions-people-want-to-answer",
    "href": "insights/motivations.html#how-to-ask-questions-people-want-to-answer",
    "title": "5  Motivations",
    "section": "5.2 How to ask questions people want to answer",
    "text": "5.2 How to ask questions people want to answer\nMuch of this material is based on How To Ask Questions The Smart Way, Eric Raymond and Rick Moen with the addition of academic references and frameworks.\nOpen source projects are famous for having direct access to very knowledgeable people about the source code. Unlike when you purchase software, you can very likely get questions in front of some of the people that wrote the underlying code.\nBut ask yourself why they are there, reading and answering user questions. What drives them, what motivates them?\n\n5.2.1 RTFM\nThere is always a risk that a poorly asked question will be met with this response:\n\n\n\nRTFM Mug by Gubatron (CC-licensed http://www.flickr.com/photos/gubatron/3102412751)\n\n\nRTFM means to “Read the F***ing Manual” (which I’ll read as Read the Fine Manual). This rather unfriendly, and indeed unwelcoming response can occur when a question is asked in a way that doesn’t understand what it is that motivates people to participate in online support forums for software.\n\nI note that open communities are not necessarily welcoming places. In fact they can be quite aggressive, even toxic. It is perhaps not unrelated that open communities are also no diverse. We will discuss this later in the course when we consider Bias and Lack of Diversity in @bias-and-lack-of-diversity\n\nLakhani and von Hippel (2003) studied the Apache httpd mailing list. They mailed a survey link to participants the first time they saw them post to the list, only mailing each person once. They received responses from 28.9% of info providers, and 16.6% info seekers.\nThey report that :\n\nspending time in the forum had excellent ROI (return on investment) for information seekers (Seekers saved 9 minutes for every 1 minute spent writing questions).\nProviders answer questions that are easy for them, rarely do they seek out additional information to help answer.\nInformation Providers invest a lot of time in the forum, average of 80 hours a year.\nKey motivations to answer were reciprocity and reputation within Apache (not career prospects)\nBut information providers are primarily there to learn (&gt;90% of time spent reading, not answering).\n\nSo, very knowledgeable people answer people’s questions when it is easy for them to do so (not spending time preparing and researching, this is not Q&A for $$$ like Quora). So what is it that brings them to these forums (thus making it quick and easy for them to answer): learning.\nHuh? What do already knowledgeable people learn by hanging out watching less knowledgeable people ask questions?\nExercise\n\nWhat does someone learn from reading questions (and answers) in a technical forum?\nWhat does someone learn from answering?\n\n\n\n5.2.2 Engaging intellectual curiosity\n\nExperts love interesting problems and the solving of them.\nInteresting problems are those that reveal some new insights\nUninteresting problems are either obvious or unsolvable (poorly specified or not actionable).\nAsk questions like an intellectual partner.\n\n\n\n5.2.3 Steps to answered question\nAgain, this is derived from How To Ask Questions The Smart Way, Eric Raymond and Rick Moen\n\nChoose the right venue\nDo (and show) your homework\nConvey your situation\nAsk an actionable question\nEngage the interest of your audience\nFollow up showing that you tried their suggestions. Don’t be the “Ok, fixed it now” guy\n\n\n\n\nhttps://www.explainxkcd.com/wiki/index.php/979:_Wisdom_of_the_Ancients\n\n\n\n\n5.2.4 Examples\n\n5.2.4.1 J Random Hacker\nDirectly from (http://www.catb.org/~esr/faqs/smart-questions.html#examples)[http://www.catb.org/~esr/faqs/smart-questions.html#examples]\n\nStupid: I’m having problems with my motherboard. Can anybody help?\n\n\nJ. Random Hacker’s response to this is likely to be “Right. Do you need burping and diapering, too?” followed by a punch of the delete key.\n\n\nSmart: I tried X, Y, and Z on the S2464 motherboard. When that didn’t work, I tried A, B, and C. Note the curious symptom when I tried C. Obviously the florbish is grommicking, but the results aren’t what one might expect. What are the usual causes of grommicking on Athlon MP motherboards? Anybody got ideas for more tests I can run to pin down the problem?\n\n\nThis person, on the other hand, seems worthy of an answer. He/she has exhibited problem-solving intelligence rather than passively waiting for an answer to drop from on high.\n\n\nIn the last question, notice the subtle but important difference between demanding “Give me an answer” and “Please help me figure out what additional diagnostics I can run to achieve enlightenment.”\n\n\n\n5.2.4.2 Getting it wrong (and yet so wrong)\nThe second example is one from my person experience.\n\n\n\nAn email sent to the R Bugs Website, I included a large file with dump from sample command to help with debugging\n\n\nI received two different responses:\n\n\n\nA vaguely chilling RTFM style response\n\n\nSo, what happened? Well, the second response made it much more clear.\n\n\n\nA friendlier response: this was not a bug!\n\n\nSo … I had done some things right, but I had made a mistake. Sending to the r-bugs mailing list implied that I thought there was a bug. But there wasn’t, it wasn’t a problem with R, it was a problem with my computer setup. I should have sent this to another forum first, one for general support, instead I had implied that there was a bug in R. Insulting people’s work is a risky way to try to get their help!",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Motivations</span>"
    ]
  },
  {
    "objectID": "insights/motivations.html#theories-of-motivation",
    "href": "insights/motivations.html#theories-of-motivation",
    "title": "5  Motivations",
    "section": "5.3 Theories of motivation",
    "text": "5.3 Theories of motivation\nWhen organizational science asks about motivation we create taxonomies of different kinds of motivation.\nA classic taxonomy is “intrinsic” vs “extrinsic” motivation. These labels are usually used informally, creating a distinction between motivations/desires that are somehow located “internally” (intrinsic) and those that are located “externally” to the individual (thus extrinsic).\nInternally located motivation are things like enjoyment, fun. Externally located motivations are things that are worthwhile because of their outcomes in the world, such as getting paid, changing the world, pleasing others.\nThe distinction is useful, but is far from the end of the motivation story.\nExercise: Talk with your partner and identify:\n\nA thing you only do for fun\nA thing you only do for the rewards available\nA thing that seems both internal and external motivations (intrinsic and extrinsic)\nA thing you do that has neither.\n\nTheorists have developed more elaborate frameworks. This one is from a theory of motivation called “self-determination theory” (Ryan and Deci, 2000):\n\nThis adds an additional dimension to the “location” of motivation which they call “Perceived locus of control” which is our own sense of whether someone is forcing us to do a particular activity, or whether we understand this to be our own choice.\nIn open source, people that stick around come to develop and talk about a real identification and integration of the goals of a particular project and their own goals. Some theorists talk about this leading to strong “organizational citizenship”.\nTalking with your partner, can you identify:\n\nA situation where you do an activity because you think it is worthwhile, even if you don’t get rewards.\nA situation in which you gave up an activity you used to value … why did you give it up?\n\nOne core idea in self-determination theory is that human development and life satisfaction comes from undertaking activities that move to the right in the diagram: from externally caused through introjection, identification, and integration.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Motivations</span>"
    ]
  },
  {
    "objectID": "insights/motivations.html#how-are-participants-motivated",
    "href": "insights/motivations.html#how-are-participants-motivated",
    "title": "5  Motivations",
    "section": "5.4 How are participants motivated?",
    "text": "5.4 How are participants motivated?\nIn 2021 research, Gerosa et al, conducted a survey of OSS participant motivations, contacting around 250 respondents and including open response questions which they then categorized (“coded”) into different motivations. Here are examples from their data (GSoC means “Google Summer of Code” which pays people, mostly students, to participate in open source projects).\n\nThey asked participants about the motivations which they recall driving their decision to start contributing, and separately their decision to continue participating, allowing a comparison of motivations over time.\nFor both starting and continuing, they found these different motivations to be mentioned different amounts, and this table shows the number of respondents and the percentage of respondents that mentioned each one.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Motivations</span>"
    ]
  },
  {
    "objectID": "insights/motivations.html#resources",
    "href": "insights/motivations.html#resources",
    "title": "5  Motivations",
    "section": "5.5 Resources",
    "text": "5.5 Resources\nAn article detailing how one open source participant is able to fund their work as a maintainer https://words.filippo.io/full-time-maintainer/\nFogel, K. (1999). Open Source Development with CVS. Coriolis Open Press, Scottsdale, AZ.\nCrowston, K., Wei, K., Howison, J., and Wiggins, A. (2011). Free (libre) open source software development: What we know and what we do not know. ACM Computing Surveys, forthcoming.\nBacon, J. (2009). The Art of Community: Building the New Age of Participation. O’Reilly Media.\nRaymond, E. S. and Moen, R. (2001). How to ask questions the smart way. Webpage. http://www.catb.org/esr/faqs/smart-questions.html\nRyan, R. M., & Deci, E. L. (2000). Intrinsic and Extrinsic Motivations: Classic Definitions and New Directions. Contemporary Educational Psychology, 25(1), 54–67. https://doi.org/10.1006/ceps.1999.1020\nGerosa, M., Wiese, I., Trinkenreich, B., Link, G., Robles, G., Treude, C., Steinmacher, I., & Sarma, A. (2021). The Shifting Sands of Motivation: Revisiting What Drives Contributors in Open Source. 2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE), 1046–1058. https://doi.org/10.1109/ICSE43902.2021.00098",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Motivations</span>"
    ]
  },
  {
    "objectID": "insights/licenses.html",
    "href": "insights/licenses.html",
    "title": "6  Licenses",
    "section": "",
    "text": "6.1 Readings prior to class\nA chapter from a book, and four blog style articles. The book chapter should take between 1-2 hours to read, the blogs should take about another 20-40 minutes.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Licenses</span>"
    ]
  },
  {
    "objectID": "insights/licenses.html#sec-license-readings",
    "href": "insights/licenses.html#sec-license-readings",
    "title": "6  Licenses",
    "section": "",
    "text": "Chapter “Writing Copyright Licenses” of Kelty, C. M. (2008). Two Bits: The Cultural Significance of Free Software. Durham: Duke University Press Books. https://twobits.net/pub/Kelty-TwoBits.pdf#page=195\nA medium length chapter describing how open source licenses came to be. Should take between 1 and 2 hours to read.\nThe Open Source Definition. https://opensource.org/osd\n\nQuick list of elements to be found in open source licenses\nFSF Settles Suit Against Cisco. https://www.fsf.org/news/2009-05-cisco-settlement.html\nA summary of the Free Software Foundation enforcing the GPL license\nAmazon: NOT OK - why we had to change Elastic licensing. (2021, January 19). Elastic Blog. https://www.elastic.co/blog/why-license-change-AWS\n\nA summary of a recent trend in open source breaks with the “no field of use” restrictions, trying to sustain an open source business model funded by cloud service delivery.\nCarlos Munoz Ferrandis. (2022, August 31). OpenRAIL: Towards open and responsible AI licensing frameworks. Hugging Face Blog. https://huggingface.co/blog/open_rail\n\nMachine learning leaders, huggingface (yes, that’s their real company name), explaining why sharing trained AI/neutral network models/weights is both similar to sharing code and different, proposing a new license focused on ethical reuse of shared trained models.\n(added for 2026) Khan Academy explanation of Creative Commons and Open Source licenses",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Licenses</span>"
    ]
  },
  {
    "objectID": "insights/licenses.html#lecture-notes",
    "href": "insights/licenses.html#lecture-notes",
    "title": "6  Licenses",
    "section": "6.2 Lecture notes",
    "text": "6.2 Lecture notes\n\n6.2.1 Copyright\n\nSource code is writing, just like a book or a poem.\nEdits are modifications, improvements create derived works, distribution makes copies\nWriting is copyrighted.\n\nOwner has the right to decide who can copy or modify\n\nViolations of a license triggered by distribution\n\ngiving to others, esp. selling\n\nPenalty for violation are:\n\nCourt order to stop distributing\nEconomic damages\n\n\n\n\n6.2.2 Revocation, time-limitation, and exclusivity\n\nThe text of specific copyright licenses can specify time-limits (after which they expire or change)\nOwner can release same work under many different licenses at once (as long as they are compatible).\n\nCalled dual-licensing\n\nOwner can re-license their own derivative works (but the license on the original is unchanged by that)\n\n\n\n6.2.3 Open Source Definition\nThe Open Source Initiative holds a trade mark so they can determine which licenses can be called open source. They have established the “Open Source Definition” with 10 elements (slightly abridged below):\n\n** Introduction **\n\n\nOpen source doesn’t just mean access to the source code. The distribution terms of open-source software must comply with the following criteria:\n\n\n\nFree Redistribution\n\n\n\nThe license shall not restrict any party from selling or giving away the software … The license shall not require a royalty or other fee for such sale.\n\n\n\nSource Code\n\n\n\n\nThe program must include source code, and must allow distribution in source code as well as compiled form … Deliberately obfuscated source code is not allowed. Intermediate forms such as the output of a preprocessor or translator are not allowed.\n\n\n\n\nDerived Works\n\n\n\nThe license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software.\n\n\n\nIntegrity of The Author’s Source Code\n\n\n\nThe license may restrict source-code from being distributed in modified form only if the license allows the distribution of “patch files” with the source code for the purpose of modifying the program at build time. The license must explicitly permit distribution of software built from modified source code. The license may require derived works to carry a different name or version number from the original software.\n\n\n\nNo Discrimination Against Persons or Groups\n\n\n\nThe license must not discriminate against any person or group of persons.\n\n\n\nNo Discrimination Against Fields of Endeavor\n\n\n\nThe license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.\n\n\n\nDistribution of License\n\n\n\nThe rights attached to the program must apply to all to whom the program is redistributed without the need for execution of an additional license by those parties.\n\n\n\nLicense Must Not Be Specific to a Product\n\n\n\nThe rights attached to the program must not depend on the program’s being part of a particular software distribution…\n\n\n\nLicense Must Not Restrict Other Software\n\n\n\nThe license must not place restrictions on other software that is distributed along with the licensed software. For example, the license must not insist that all other programs distributed on the same medium must be open-source software.\n\n\n\nLicense Must Be Technology-Neutral\n\n\n\nNo provision of the license may be predicated on any individual technology or style of interface.\n\n\n\n6.2.4 Copyleft\n\nSome licenses add an additional restriction; They are called copyleft licenses (a play on the word copyright).\nItem number 3, Derived Works, says:\n\n\nThe license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software.\n\nCopyleft licenses alter this by changing “must allow” to “if distributed, must require”\n\nThe license must allow modifications and derived works, and if distributed must require them to be distributed under the same terms as the license of the original software.\n\n\nCopyleft means derived works, that are distributed, cannot be licensed under a different license but must be licensed under the same license. See detailed discussion at copyleft.org\nThis is informally referred to as viral: derived works are “infected” and must all be copyleft.\nThis only applies if the changes are distributed. Usually this means distributed beyond the individual or company that owns the copyright. This means that companies can alter copyleft software, as long as they don’t let that code outside their own organization.\n\n\n\n6.2.5 Recent controversies discussion\n\n6.2.5.1 Cloud software\nThe original open source licenses were written before cloud, and the idea of Software As A Service (SAAS). Why does cloud and SAAS change a key circumstance?\n\nCloud delivery of software\n\nWhy was the Affero GPL created?\nAmazon Web Services and open source.\n\nElastic Search has created their own license. What does it do differently? Is it an open source license? Would OSI consider it to be an open source license?\n\n\n\n6.2.5.2 Source-available vs open source\nWhat is meant by “source-available” licenses? Find some examples of licenses that are “source available” but don’t meet the OSI Open Source Definition. What clauses do they violate?\n\n\n6.2.5.3 Artificial Intelligence software\nNeural Networks express much of their logic not in code, but in the weights of a trained neutral network.\n\nWhy does this change impact open source?\nCan trained neutral networks be modified or improved? What would be needed?\nWhat does the OpenRAILs license try to do? See Hugging Face reading above (Section 6.1).\nWould OSI judge that license to be “open source”? Which provisions, if any, might it violate?\n\n\n\n6.2.5.4 Recent license violation articles.\nhttps://undeleted.ronsor.com/voice.ai-gpl-violations-with-a-side-of-drm/\nDiscussed on Hacker News here: https://news.ycombinator.com/item?id=34681636\nNot just violating GPL, but likely other licenses too (not including license in distributed non-copyleft open source).\nLots of these out there, found this as searching:\nhttps://hackaday.com/2022/07/15/watch-out-for-lasercutter-manufacturers-violating-gpl/\nIncluding stories about startups whose cash out was sunk by OSS license violations:\nhttps://abovethelaw.com/2022/01/how-to-ensure-open-source-risks-wont-scuttle-your-deal/\nPoint is not to scare people from using open source, but to understand the very real meaning of the licenses. The more sophisticated understanding of open source you are gaining from this course will be an advantage in the job market.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Licenses</span>"
    ]
  },
  {
    "objectID": "insights/coordination.html",
    "href": "insights/coordination.html",
    "title": "7  Coordination",
    "section": "",
    "text": "7.1 Pre-readings for class\nCoordination is a commonly used word, meaning what needs to be done for a group to work effectively together.\nIn the academic field of organization science, coordination has a more specific meaning, provided by Malone and Crowston (1994)1.\nWe will learn what this means, and how it relates to motivation for participation in open source, and discuss the role that version control and repositories play.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Coordination</span>"
    ]
  },
  {
    "objectID": "insights/coordination.html#pre-readings-for-class",
    "href": "insights/coordination.html#pre-readings-for-class",
    "title": "7  Coordination",
    "section": "",
    "text": "Expectancy Theory (Wikipedia) https://en.wikipedia.org/wiki/Expectancy_theory\nExpectancy Theory (useful figure): https://web.archive.org/web/20220705161833/https://www.iedunote.com/expentancey-theory\nHowison, J., & Crowston, K. (2014). Collaboration through open superposition: A theory of the open source way. MIS Quarterly, 38(1), 29–50. http://james.howison.name/pubs/howison-2014-superposition.pdf\n“My favorite commit”: https://dhwthompson.com/2019/my-favourite-git-commit",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Coordination</span>"
    ]
  },
  {
    "objectID": "insights/coordination.html#expectancy-valance-model-of-motivation",
    "href": "insights/coordination.html#expectancy-valance-model-of-motivation",
    "title": "7  Coordination",
    "section": "7.2 Expectancy Valance Model of Motivation",
    "text": "7.2 Expectancy Valance Model of Motivation\n\n\n\n\n\nflowchart LR\n    idExp[Expectancy] --&gt;|x| idInst[Instrumentality] --&gt;|x| idVal[Valence]\n    idA[Effort] --&gt;|x| idB[Performance] --&gt;|x| idC[Reward]\n    idQ1[\"Will my effort lead to high performance? Probability\"] --&gt; idQ2[\"Will Performance lead to outcomes?\"] --&gt; idQ3[\"Do I find the outcomes desirable?\"]\n\n    style idExp fill:#FFA500\n    style idA fill:#FFA500\n    style idQ1 fill:#FFA500\n\n    style idInst fill:#C8A2C8\n    style idB fill:#C8A2C8\n    style idQ2 fill:#C8A2C8\n    \n    style idVal fill:#6495ED\n    style idC fill:#6495ED\n    style idQ3 fill:#6495ED",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Coordination</span>"
    ]
  },
  {
    "objectID": "insights/coordination.html#presentation",
    "href": "insights/coordination.html#presentation",
    "title": "7  Coordination",
    "section": "7.3 Presentation",
    "text": "7.3 Presentation",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Coordination</span>"
    ]
  },
  {
    "objectID": "insights/coordination.html#footnotes",
    "href": "insights/coordination.html#footnotes",
    "title": "7  Coordination",
    "section": "",
    "text": "Malone, T. W., & Crowston, K. (1994). The interdisciplinary theory of coordination. ACM Computing Surveys, 26(1), 87–119. https://doi.org/10.1145/174666.174668 or http://ccs.mit.edu/papers/CCSWP157.html↩︎",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Coordination</span>"
    ]
  },
  {
    "objectID": "insights/governance.html",
    "href": "insights/governance.html",
    "title": "8  Governance",
    "section": "",
    "text": "8.1 Pre-Readings\nExtra optional reading: Podcast on “Learning from Open Source”: https://a16z.com/podcast/learning-from-open-source-communities/. We will have readings from this later in the course, so useful to do now.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Governance</span>"
    ]
  },
  {
    "objectID": "insights/governance.html#pre-readings",
    "href": "insights/governance.html#pre-readings",
    "title": "8  Governance",
    "section": "",
    "text": "Ross Gardler & Gabriel Hanganu. (2013). Governance models. OSS-Watch.ac.uk. http://oss-watch.ac.uk/resources/governancemodels\nKarl Fogel. (2020). Chapter 8: Managing Participants. In “Producing OSS” Book. https://producingoss.com/en/managing-participants.html\n“How Open Source communities are evolving” https://blog.weareopen.coop/how-open-source-communities-are-evolving-9cc768249777. Presents a useful typology from Nadia Eghbhal’s work\nApache Foundation guide to voting in projects. https://www.apache.org/foundation/voting.html",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Governance</span>"
    ]
  },
  {
    "objectID": "insights/governance.html#exercise-note-taking-via-google-docs",
    "href": "insights/governance.html#exercise-note-taking-via-google-docs",
    "title": "8  Governance",
    "section": "8.2 Exercise: Note-taking via google docs",
    "text": "8.2 Exercise: Note-taking via google docs\nYou will be placed into groups of 3 (not sitting near each other):\n\nCreate a google doc and share it\n\nFor next 2 steps follow two rules:\n\nYou may not talk to each other\nYou may not write instructions to each other in the Google doc (or elsewhere, e.g., chat)\n\n\nWorking in this mode: produce a 2 page summary of:\n\nRoss Gardler & Gabriel Hanganu. (2013). Governance models. OSS-Watch.ac.uk. http://oss-watch.ac.uk/resources/governancemodels\n\nContinuing to work in this mode: include within your text three comparisons with the work linked below (comparisons could include that the work agrees, disagrees, extends, adds example, etc.):\n\nKarl Fogel. (2020). Chapter 8: Managing Participants. In “Producing OSS” Book. https://producingoss.com/en/managing-participants.html\n\nCreate a final heading, “Reflections on working without talking”. Move to sit next to each other. Ironically, you can talk to each other as you write down at least 3 bullet points about your experience doing this note-taking.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Governance</span>"
    ]
  },
  {
    "objectID": "insights/governance.html#how-do-open-source-projects-make-decisions",
    "href": "insights/governance.html#how-do-open-source-projects-make-decisions",
    "title": "8  Governance",
    "section": "8.3 How do open source projects make decisions?",
    "text": "8.3 How do open source projects make decisions?\nWorking in a project requires many decisions, e.g.,:\n\nChoosing a project name\nDeciding whether to add a color scheme\nChoosing whether to use UK or US spelling rules\nDeciding when to release a new version\n\nProjects have a wide range of ways that they make these decisions (including avoiding having to make decisions!). We call these “governance models”.\nOutside open source there are also many governance models, including very well known ones:\n\nDemocracy (direct and representative)\nDictatorship\nCorporate hierarchy\nConsensus",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Governance</span>"
    ]
  },
  {
    "objectID": "insights/governance.html#recent-innovations-in-decision-making",
    "href": "insights/governance.html#recent-innovations-in-decision-making",
    "title": "8  Governance",
    "section": "8.4 Recent innovations in decision making",
    "text": "8.4 Recent innovations in decision making\nWhile we may think the process of creating new models of decision making in groups has stopped or slowed, recent innovations abound:\n\nOccupy Wall Street Hand signals used during discussion at https://en.wikipedia.org/wiki/General_assembly_(Occupy_movement)\n\n\nVideo of hand signal explanation\n\nMore traditional meetings organized using Robert’s Rules of Order\nNew constitutions written by countries. e.g., Chile’s new constitution process 2022\n\nStudents and faculty at the University of Texas are involved with a project (and software) to compare the texts of Constitutions around the world.. Including using diffs (just like git does) to understand changes. e.g., changes in Algeria’s constitution (diff 1989 2020). “Constitute was developed by the Comparative Constitutions Project at the University of Texas at Austin and the University of Chicago, directed by Zachary Elkins and Tom Ginsburg.”",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Governance</span>"
    ]
  },
  {
    "objectID": "insights/examining_real_projects.html",
    "href": "insights/examining_real_projects.html",
    "title": "9  Examining Real Projects",
    "section": "",
    "text": "9.1 Projects to examine\nFor today’s class we will put the concepts we have been learning into action by examining real world open source software projects.\nWe will find the online presences of three projects (both general websites and source code repository pages on github), and seek to find out what we can about these aspects of each project.\nIt may help to have in mind these scenarios:\nEach of us will examine three projects. We will all examine the YT project https://github.com/yt-project/yt\nThen you can pick one from this list:\nFinally, you should identify and examine a third project of your own interest. Pick something that you might use, perhaps something from your data science work, or search for a tool in your area of interest.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Examining Real Projects</span>"
    ]
  },
  {
    "objectID": "insights/examining_real_projects.html#projects-to-examine",
    "href": "insights/examining_real_projects.html#projects-to-examine",
    "title": "9  Examining Real Projects",
    "section": "",
    "text": "https://github.com/kubernetes/kubernetes\nhttps://github.com/sindresorhus/awesome\nhttps://github.com/tidyverse/ggplot2\nhttps://github.com/nocodb/nocodb\nhttps://github.com/mastodon/mastodon",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Examining Real Projects</span>"
    ]
  },
  {
    "objectID": "insights/examining_real_projects.html#group-notes-on-examination",
    "href": "insights/examining_real_projects.html#group-notes-on-examination",
    "title": "9  Examining Real Projects",
    "section": "9.2 Group notes on examination",
    "text": "9.2 Group notes on examination\nForm a group of 2 or 3. You will be editing a shared Google Doc. Add your name at the top of the doc. Copy the items to examine from above into the doc (you will have to copy this for each of the three projects that you examine).\nYou should write a paragraph or two on each bullet point, for each project.\nManage your time effectively to finish this in-class.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Examining Real Projects</span>"
    ]
  },
  {
    "objectID": "insights/bias_lack_of_diversity.html",
    "href": "insights/bias_lack_of_diversity.html",
    "title": "10  Bias and Lack of Diversity",
    "section": "",
    "text": "Open source software production lacks diversity. In fact open source is even less diverse than the software industry in general. Open source shares this perhaps surprising characteristic with other open collaborative projects, including Wikipedia.\nIn class today we will undertake shared note-taking in groups on this topic, preparing for a discussion.\nExamine these “developer surveys” to add data (agreeing or disagreeing) with the opening statement of this page:\nhttps://survey.stackoverflow.co/2022/\nhttps://octoverse.github.com/\nOdd numbered groups will read:\nAlbusays, K., Bjorn, P., Dabbish, L., Ford, D., Murphy-Hill, E., Serebrenik, A., & Storey, M.-A. (2021). The Diversity Crisis in Software Development. IEEE Software, 38(2), 19–25. https://doi.org/10.1109/MS.2020.3045817\nEven numbered groups will read:\nFrluckaj, H., Dabbish, L., Widder, D. G., Qiu, H. S., & Herbsleb, J. D. (2022). Gender and Participation in Open Source Software Development. Proceedings of the ACM on Human-Computer Interaction, 6(CSCW2), 299:1-299:31. https://doi.org/10.1145/3555190\nQiu, H. S., Zhao, Z. H., Yu, T. K., Wang, J., Ma, A., Fang, H., Dabbish, L., & Vasilescu, B. (2023). Gender Representation Among Contributors to Open-Source Infrastructure: An Analysis of 20 Package Manager Ecosystems. 2023 IEEE/ACM 45th International Conference on Software Engineering: Software Engineering in Society (ICSE-SEIS), 180–187. https://doi.org/10.1109/ICSE-SEIS58686.2023.00025\nBoth will read:\nPadala, H. S., Mendez, C., Fronchetti, F., Steinmacher, I., Steine-Hanson, Z., Hilderbrand, C., Horvath, A., Hill, C., Simpson, L., Burnett, M., Gerosa, M., & Sarma, A. (2022). How Gender-Biased Tools Shape Newcomer Experiences in OSS Projects. IEEE Transactions on Software Engineering, 48(1), 241–259. https://doi.org/10.1109/TSE.2020.2984173\nAntin, J., Yee, R., Cheshire, C., & Nov, O. (2011). Gender Differences in Wikipedia Editing. In Proceedings of the 7th International Symposium on Wikis and Open Collaboration (pp. 11–14). New York, NY, USA: ACM. https://doi.org/10.1145/2038558.2038561\nAnd all of these articles:\n“Nearly All of Wikipedia Is Written By Just 1 Percent of Its Editors” https://motherboard.vice.com/en_us/article/7x47bb/wikipedia-editors-elite-diversity-foundation,\nWikipedia page on gender bias in Wikipedia (so meta) https://en.wikipedia.org/wiki/Gender_bias_on_Wikipedia\nInside Wikipedia’s Attempt to Use Artificial Intelligence to Combat Harassment https://motherboard.vice.com/en_us/article/aeyvxz/wikipedia-jigsaw-google-artificial-intelligence\nQuestions for discussion:\n\nWhat types of diversity does the literature discuss? How does open source compare to: a) the world, b) software industry as a whole.\nWhat causes are discussed?\nWhat possible approaches to improving the situation are discussed? How might approaches used in Wikipedia help?\nWhat authority of legitimacy does work to improve diversity draw on?\nIn what ways does a lack of diversity mean that open source is failing to live up to its own ideals?",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bias and Lack of Diversity</span>"
    ]
  },
  {
    "objectID": "insights/stack_and_stream.html",
    "href": "insights/stack_and_stream.html",
    "title": "11  From Stack, to stream, to ecosystem.",
    "section": "",
    "text": "11.1 Stack\nMetaphors help us build an image of the organization of complicated sociotechnical systems. In this class I discuss three key metaphors employed in the discourse around software and the organization of its production and distribution: a “stack”, a “stream” (esp. “upstream”/“downstream”) and “ecosystem”.\nWhen a programmer writes code they do so in a concrete workspace, a filesystem containing libraries which we can think of as their raw materials. That filesystem might be on a laptop, a server accessed by ssh or through a notebook server, or a docker image. Together with tools to write code (editors) and local configurations (.profile) these workspaces are called dev environments.\nThe actual code newly written by the programmer orchestrates this assemblage of code to build analyses, create graphs, do science. That code is a thin layer sitting atop a range of received code, from plotting libraries, filesystem utilities, operating systems. We refer to these chunks of code in various ways, libraries, packages, modules, services and we refer to the language used to access that code as interfaces, APIs, hooks, exposed names of methods/procedures. For any particular piece of code it is possible to trace paths of execution from the newly written code (sometimes called a “call tree”), through calls and parameter lists.\nThe way that new code “sits on top of” received code is often visible to the programmer on error when they scan the “stacktrace” looking for the location of errors and hints on how to overcome them.\nThe stack in stacktrace refers to a very specific set of memory locations and post-compiler processes of code execution, but colloquially we have come to refer to the assemblage of code underlying newly written code in the workspace as “the stack”. This metaphor makes clear the layering of dependency between code: packages called by newly written code are thought of as lying immediately below, and indeed physically supporting, the newly written code. The packages called by that first supporting layer are seen to support that layer, lying physically beneath and supporting all the layers above. Abstracting from any particular execution path of a particular piece of code, we understand packages to underlie and support any package which calls code from them, the typical patterns of usage forming a picture of hierarchy. From this understanding we get the ubiquitous “stack diagram” showing a neat layered structure. (Incidentally a “full stack” developer is one that is expected to be able to write code across the data and execution paths in locally written software, not usually “down” into the full stacktrace!).\nBeing lower in the stack is a result of having more code (especially packages which are themselves called by other packages) that calls you, and thereby being involved in a wider range of software execution paths. A filesystem module would be involved in game development and in climate change modeling; a graphing library called from code to describe election results and counting cat pictures on twitter. These different kinds of applications and analyses reflected in more specialized packages can be thought of as structures of packages stacked atop other packages, moving upwards through an ever more elaborate stack diagram, showing spires of specialization, both in application area and in higher-level language, Python vs dotNet for example. Frequently we see alternative stacks, even within specific areas, such as R vs Python datascience or even within a language group, such as R tidyverse vs “base R” vs R data.table.\nIn terms of workspaces this means that these “lower” packages were present in a wide range of different workspaces, as new code was written. In different workspaces working on different kinds of code, needing different kinds of analyses, algorithms, and capabilities, different sets of packages are present.\nHow then do packages get to workspaces?\nIn “user space” software is often obtained by visiting a website and hitting “download,” receiving an application to be copied to a location on the computer. Even much vaunted “app stores” are merely a pay-walled version of this. In “dev space” code can arrive in this way, with a user downloading source code, sometimes called a “tar-ball” after the historical tool to pack many files into one for ease of downloading, and unpacking it into their programming workspace. This is problematic, though, because the downloaded code is not useful without its dependencies, the relatively lower layers in the stack. Resolving this leads to practices that provide dependencies together with the downloaded code (through techniques such as “static compilation” or bundling). Or rather providing reduced slices of the underlying libraries, reflecting the precise execution path, rather than the full set of underlying code and its possibilities. Unsurprising when stacks of code can be large (or very large, such as the notorious TeXLive which is over a gigabyte in size). Quite quickly, installing software this way can result in multiple copies of underlying code being present on the computer, located in different bundles installed at different times and in different places. For programs in “user space” this is only mildly problematic, taking up more space than strictly needed, but space is cheap and the complexity is entirely hidden from the user.\nIn “dev space”, though, the programmer may want to access different capabilities of underlying libraries (unleashing the “innovation potential” of the “option value” inherent in “modularity” as management science would put it, see Chapter 7). As a toy example consider downloading code that sorts a list of addresses by zipcode, bundling a numeric sort from an underlying library. Should we now want to sort alphabetically we would either have to implement that ourselves with new code, or obtain the underlying library to gain the alphabetical sort capability.\nPretty soon, we would have multiple versions of the underlying library, and all the packages underlying them, lying chaotically around the filesystem, each installed at different times and having sometimes subtly different behaviors. Given the complexities of the many ways that compilers look for and prioritize code this can lead to immensely frustrating confusions (Any one that has struggled to understand the PATH parameter in Java, or been stymied by a stray .py file named the same as an obscure library, will attest). This situation will result in code that is hard to reuse because it is heavily dependent on the location in which it is written, with hardcoded paths, and special cases.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>From Stack, to stream, to ecosystem.</span>"
    ]
  },
  {
    "objectID": "insights/stack_and_stream.html#package-managers",
    "href": "insights/stack_and_stream.html#package-managers",
    "title": "11  From Stack, to stream, to ecosystem.",
    "section": "11.2 Package managers",
    "text": "11.2 Package managers\nEnter the package manager. Package managers stand between the projects writing packages and the individual workspaces of programmers. Examples include Python’s pip, Perl’s CPAN, R’s CRAN, Javascript’s npm, and Java’s Maven, as well as operating system distributions (such as Debian’s apt-get) and cross-language collections such as Homebrew, SBGrid, and Anaconda. All subtly different, their vision includes an installation tool that programmers use to identify the high-level library they want to access, a well-specified location for installed software. They include a metadata scheme to describe dependencies and a graph traversal approach to “resolve dependencies”. Together this allows programmers to install libraries and have the package manager take care of ensuring a minimal and coordinated install of underlying packages.\nPackage managers also enable programmers to smoothly update the libraries in their workspaces to newer versions, taking care of the cascading need for updates further down in the stack. Yet not all packages are ready to interact with newer versions of down stack packages, packager managers can also keep older versions installed and available to those parts of the stack that need them (sometimes called “pinning”). The ability of packager manager to update software stacks means that novel capabilities can be distributed out to potential programmer users, while facilitating stability and coordination across the installed stack in individual programmer workspaces.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>From Stack, to stream, to ecosystem.</span>"
    ]
  },
  {
    "objectID": "insights/stack_and_stream.html#stream",
    "href": "insights/stack_and_stream.html#stream",
    "title": "11  From Stack, to stream, to ecosystem.",
    "section": "11.3 Stream",
    "text": "11.3 Stream\n\nhttps://www.mountainhearth.com/2015/02/rivulets.html\nThe production system that produces the stack is spoken about as a stream.\nThe stream flows along paths defined by dependency links and, over time, things move along these links, new capabilities, approaches, and sometimes bugs and problems!\nThe language here is far from precise (and confusing if one thinks too literally!), but in general packages lower in the stack are considered to be “upstream” (towards the source) and packages closer to specialized users, are considered to be “downstream” (even though they are higher in the stack diagrams).\nThe image is of rivulets, diverging into smaller and smaller specialized paths akin to the “spires” in the stack metaphor.\nThe stream analogy is particularly useful when thinking about how changes spread out, becoming used by nearby packages, and eventually making their way to programmer’s workspaces via package managers.\nConsider a new piece of software functionality, such as a novel analysis, a new data structure, or a bug-fix. In a concrete sense these originate in a specific programmers workspace and must be distributed to spread out to eventual users. In practice this means that the change has to travel back “upstream” before traveling “downstream” through the packager manager managed flow that will eventually bring it to the workspaces of other developers.\nThat “upstream” flow likely starts with a push from the programmer’s local filesystem, into their repository hosted online (e.g., github). If the change is instantiated as a new package itself, it can make its way into the package management flow through submission to a package manager (which pulls from the repository, confirms dependency information, builds, tests, and publishes the package and its documentation).\nIf the change is not a new package itself, but an edit to an existing package, before that change can enter the flow and travel downstream to programmers, the change needs to move from the individual programmer’s repository into the main repository for the package. In this case the individual programmer’s repository is a “fork” of the main package repository, which means that the repository hosting service (github, gitlab etc) stores the connection between the repositories, making it easy to initiate a “pull request” (colloquially called a PR). A PR is a note to the maintainers of the destination package repository that a proposed change is available and ready for pickup. The maintainers, change author, and package community, can then test and discuss the change. If appropriate, the maintainers can “merge the PR” bringing the change into the development version of the package, to be included in a new versioned release submitted to the package manager.\nChanges thus enter the package manager facilitated flow, and travel down paths defined by dependency relationships.\nThe speed at which changes travel depends on a few factors. Perhaps a user of the package is watching the PR and ready to rapidly update the code in their workspace to tackle an analysis issue on a deadline, or perhaps an update of dependencies happens as a downstream package is getting ready to deploy updates of their own by “rolling” up a new release. Updates can also be quite slow, as end-user scientists return months later to previous workflows after collecting new data or inventing new techniques. Updates flowing can also be blisteringly quick, in that package management systems or individual package projects themselves can undertake “continuous integration” which means automatically updating all components frequently (daily or even on every commit of new code). Continuous integration is an approach to gain early insight into issues caused by changes in the underlying stack.\n\nhttps://www.flickr.com/photos/mrhayata/6933963596\nAs changes propagate downstream they bring with them implications and work. A package project updating dependencies may be receiving new opportunities, new ways to simplify and implement long-standing desires of the project and its users, unlocking a flurry of consequential activity and excitement in the receiving project.\nOr, less sanguinely, a project may discover that their code no longer builds, due to “breaking changes” in the underlying libraries, requiring the receiving project to either resolve these issues through local workarounds or adaptations, or essentially reject the flow of changes by “pinning” their dependency to an earlier version.\nPerhaps more pernicious still are changes in behavior of underlying libraries that are not obvious at build time, and don’t show up in batteries of tests, but only when a package is in use in the field. Thus a change in an underlying library can appear benign but lead to confusing bug reports. These issues can take time to trace to the changed dependency, appearing at first to be newly discovered issues in the receiving project’s own evolving code. Even when the issue is traced to the change in the dependency, work is still implied as the package developers have to now act as users of the underlying dependency and report the issue to the “upstream” package. Developers can try to exhort their own users to report the issue upstream, but the intricacies of just how the issue in the dependency is causing the problem in the user space often requires protracted, three-way discussions between the downstream user, the developers of the package being immediately used, and the developers of the underlying dependency.\nAn appreciation of the scale of the work implied by package updates comes into focus when one recognizes that each change arriving at each downstream package can cause changes at the receiving package, and those reaction changes are themselves incorporated in new releases and thus moved into the flow, and themselves travel to their own downstream packages and users, each potentially kicking off new rounds of changes, a cascade of reactions to reactions to reactions, reverberating and crisscrossing throughout the network of package dependencies.\nThe pressure to be up to date (and thus the pressure to undertake the adaptation work needed) comes not only from the new opportunities offered by changes, but also because it is far easier to get insight and help from both developers and fellow users when encountering problems or learning about software when one is working with relatively recent code. Not only are developers more aware of how recent versions work, they are far more likely to be motivated to help, both to explain the work they have recently done and share the new opportunities they are bringing to downstream users, but also to identify, characterize, and resolve possible bugs introduced. Finally, issues faced by users can stem from bugs already fixed, so “getting on the same page” is seen as respectful of package developers and active users time.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>From Stack, to stream, to ecosystem.</span>"
    ]
  },
  {
    "objectID": "insights/stack_and_stream.html#ecosystem",
    "href": "insights/stack_and_stream.html#ecosystem",
    "title": "11  From Stack, to stream, to ecosystem.",
    "section": "11.4 Ecosystem",
    "text": "11.4 Ecosystem\nHow then from stream to ecosystem? The packages seem to be alive, altering the landscape on which other packages live, creating and consuming resources of time, attention, and opportunities. But to really grasp the core of the ecosystem metaphor we must take a detour to the question of how researchers come to locate software.\nSurprisingly little is known about the uptake of software by developers, including how they first hear of packages, how they investigate and evaluate packages, and the path from initial discovery to regular use (and the path by which software falls out of use). Different kinds of paths may exist for different kinds of software, especially differing as software is closer to the scientific method frontier. For example, perhaps PIs or senior personnel are more involved in the selection of packages which closely model and implement scientific theories and analyses, while decisions about dataflow and execution infrastructure are taken by more junior developers.\nThe literature on software choice has largely developed in the user-space domain, and particularly around enterprise software. Typically this highlights usability, and perceived ease of use. When the choice is between programming libraries, rather than point-and-click software these factors may express themselves differently. For example it seems very likely that usability and perceived ease of use are thought of in terms of compatibility with existing toolchains. These compatibilities are sometimes spoken of as “affinities” and include aspects such as language, data format expectations (input, output, and working data structures), design philosophies expressed in software architectures. In analysis code, undoubtedly scientific domain or topic reflect affinities as well. These affinities are likely related to (or even signaled by) overlapping developers and supporters (both individuals and organizations), developing in a structurational way. Additional affinities might include well known examples of use, such as in widely read blogs ((this is why Articles are aggregated in Runiverse)), conference presentations, tutorials, or discussions on Q&A sites/forums/mailing lists.\nThese affinities give rise to the feeling of physical closeness between packages which is core to how developers discuss code. This idea of closeness is reflected in the metaphors employed, from calling packages “nearby” talking about “neighborhoods” and “communities”, as well as grouping into vertical/horizontal closeness in the “stack” metaphor, and geographic connection in the “stream” metaphor. In particular as package affinities develop, giving rise to downstream packages, the language expresses not only closeness of packages with affinities, but a clustering, a tightening of affinities and links within the cluster and de-emphasis of links across clusters, leading to a perception of separateness.\nThis idea can be seen in the language of “software ecosystems”, usually reflecting a cluster around some central artifact or library. The core element of that metaphor is closeness and the provision of services to each other, relatively local relationships that enable collective, sustained, evolving function. Ecosystems, as they become denser, also develop new functionality, perhaps coming to be alternatives to software already in that “space”. Here the ecosystem metaphor again invokes the ecological idea of competition for space, and the resources that space implies, albeit with deep vagueness about whether users, developer time, or option-value from dependencies, are the things being competed for.\n\nEcosystems can be nested, with specific ecosystems embedded within more general software clusters. As one zooms out more expansive metaphors of space and connection are used, including planet and universe, but generally the idea of embedded ecosystems continues to work well. For example, one might say that the ggplot ecosystem is embedded in the tidyverse which is embedded in the R ecosystem which is embedded in the data science ecosystem. Generally, though, the metaphor seems most apt for clusters of software that are scaled so that individuals can monitor and perceive activity.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>From Stack, to stream, to ecosystem.</span>"
    ]
  },
  {
    "objectID": "insights/agile.html",
    "href": "insights/agile.html",
    "title": "12  Iterative Development, Regression Tests, and Continuous Integration",
    "section": "",
    "text": "12.1 Iterative Development\nThe coordination of work in open source is assisted by three practices: iterative development, regression tests, and continuous integration.\nIterative development has at its core the idea that the best way to know what to build is to get a product into a users hands quickly, collect feedback, then iterate.\nTest suites allow a programming group to define expected behaviors and verify them using software tests. Then, when changes are introduced to the codebase, the test suite can show that the changes have not accidentally altered the expected behaviors.\nContinuous Integration encourages frequent merging of developing code, running the test suite to ensure that nothing is merged to main unless all the tests pass.\nIn software engineering, iterative development is contrasted with “the waterfall model”. Whereas “waterfall” is understood as a rigid structure of software planning and execution where each phase is complete and validated before moving to the next phase. Usually these phases involve at least Requirements, Design, Implementation, Deployment, Maintenance. The core idea is to be efficient and effective by knowing what should be built, having a careful and validated design, then write code optimized to that design, before rolling out a complete product that can be maintained at lower cost. Further reading: https://www.techtarget.com/searchsoftwarequality/definition/waterfall-model\nIn contrast, Iterative development expects many short repeated cycles of build, release, feedback, and redesign. A team doing iterative development seeks to quickly produce working software and get it in front of potential users. A core idea here is that it is hard for potential users to describe their requirements in the abstract, but it is easier for them to give feedback when they have something “in their hands”. This is because people think more clearly when their bodies are involved (an idea called “embodied cognition”) or at least real things like actual documents or real data in a database, more closely approximating the situation in which they would be using the software (an idea called “situated cognition).\nThere are many useful comparisons of agile and iterative development, including the Medium article that contains this figure.\nIterative development plays a key role in open source. Open source projects typically do not undertake user research, but instead build things that work for the core developers. Those products then find their way into users hands. Users working directly with existing software then conceptualize improvements or identify flaws, some users then take the time to give feedback through Issues or bug reports, creating new ideas for developers to potentially implement.\nIterative development is part of what has become known as “Agile methods” and “Scrum” but those are more elaborate approaches to managing software development which are appropriate for companies and teams with employees.\nhttps://en.wikipedia.org/wiki/Iterative_and_incremental_development\n“Giddings, R. V. (1984). Accommodating Uncertainty in Software Design. Commun. ACM, 27(5), 428–434.”, “https://doi.org/10.1145/358189.358066”\nhttps://campus.datacamp.com/pdf/web/viewer.html?file=https://projector-video-pdf-converter.datacamp.com/29774/chapter1.pdf#page=28",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Iterative Development, Regression Tests, and Continuous Integration</span>"
    ]
  },
  {
    "objectID": "insights/agile.html#test-suites",
    "href": "insights/agile.html#test-suites",
    "title": "12  Iterative Development, Regression Tests, and Continuous Integration",
    "section": "12.2 Test Suites",
    "text": "12.2 Test Suites\nYet iterative development means lots of change. Changes come from within the project (new contributions, bug fixes) but also from outside the project, including changes in dependencies. Dependency changes come not only from bug-fixes, but also from new features in dependencies which offer new opportunities but also require changes in the codebase. Change can also come from periodic “clean ups” or “refactoring” efforts to reduce duplication and make a codebase easier to work with.\nAs code builds up over time the original intentions of developers can become less clear. While documentation (separate written guides to the code) can help, there is little motivation to write documentation and keep it up to date.\nTest suites offer the opportunity to record the expected behavior of software. A software test provides an expected output (or behavior), identifies the code which should provide that output, and provides a way to run the code (often together with known input), and to compare expected vs actual output.\nhttps://campus.datacamp.com/courses/introduction-to-testing-in-python/creating-tests-with-pytest?ex=2\nTest suites can also include a sort of meta-test that examines which lines of code are run when all the tests are run, then reports “coverage” to show what proportion of code has actually been tests.",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Iterative Development, Regression Tests, and Continuous Integration</span>"
    ]
  },
  {
    "objectID": "insights/agile.html#continuous-integration",
    "href": "insights/agile.html#continuous-integration",
    "title": "12  Iterative Development, Regression Tests, and Continuous Integration",
    "section": "12.3 Continuous Integration",
    "text": "12.3 Continuous Integration\nOur third concept is continuous integration. CI encourages frequent merging of developing code, running the test suite to ensure that nothing is merged to main unless all the tests pass.\nIn projects that use CI, when a developer is creating a PR, the system will, in the background, run the test suite and see if all tests pass. Depending on the project policies, the developer may be able to continue to create the PR if the tests are failing, or the project may require that all tests pass even before a PR is created.\nIn GitHub, CI is enabled by by Github Actions. You can think of these as scripts that are executed on GitHub servers, kicked off by events within the GitHub system. They are able to spin up virtual machines, install the code, dependencies, and run test suites.\nhttps://docs.github.com/en/actions/automating-builds-and-tests/about-continuous-integration\nVasilescu, B., Yu, Y., Wang, H., Devanbu, P., & Filkov, V. (2015). Quality and Productivity Outcomes Relating to Continuous Integration in GitHub. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering (pp. 805–816). New York, NY, USA: ACM. https://doi.org/10.1145/2786805.2786850",
    "crumbs": [
      "Insights",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Iterative Development, Regression Tests, and Continuous Integration</span>"
    ]
  },
  {
    "objectID": "skills/paper_planes_git.html",
    "href": "skills/paper_planes_git.html",
    "title": "13  Paper Planes Exercise 2: Version control and collaboration",
    "section": "",
    "text": "13.1 Sequential work\nOrganize into groups of 3 around a table. Figure out alphabetical order of first names. First person is Originator, Second person is Improver1, Third is Improver2.\nUnlike the competitive environment from Monday, let’s assume that there is no competition between plane flyers, it’s all about the love (or if they do compete it’s not on plane designs).\nInstructions flow around just for the asking.\nBut since they rely on each other, eventually it makes sense to have a central place to gather the improvements, a central place to bring them together.\nOur proxy for work will be small paper planes, made from post-it notes. You can think of these as akin to source code files.\nWe will set up a table like in the image below, with two spaces for each person: their “working area” (right in front of them) and their “repository” (just further in front).\nGit stores full versions of our working areas. This means all the files and folders in our source code project. Git stores full copies of work as it was. In our exercise we will use a folded piece of white paper as a proxy. Think of it like a tray on which all our work sits. We will have lots of copies of these workspaces.\nIn this exercise we will be making lots of copies. And that is, fundamentally, how git works. For this reason it is really important that you take the time to make the needed copies.\nWe will need to make a new copy of a workspace each time work moves around. As we’ll see that will happen when work moves out of a repository.\nOur commit will be a creased piece of paper, with a paper plane on it, together with a name for the commit and a comment. We will write the name and comment directly on the creased piece of paper. The name we will use will be the letter V followed by three random letters. Examples could be VKKT or VGTD or VLLT. No need to worry about sequences, these are just names.\nHere is an example of this exercise underway, see lots of copies of the postit planes and the white commit trays.\nOur first scenario will be sequential work, meaning that the Originator works, then Improver1, then Improver2, but none working at the same time.  1. The originator creates a commit, with a basic plane. Mark this with a name (e.g., VKKF or VEDS) and a comment (e.g., My first attempt). Store this in front of you (in your “repository”).\nYes, that’s a lot of steps, and a lot of copies!",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Paper Planes Exercise 2: Version control and collaboration</span>"
    ]
  },
  {
    "objectID": "skills/paper_planes_git.html#sequential-work",
    "href": "skills/paper_planes_git.html#sequential-work",
    "title": "13  Paper Planes Exercise 2: Version control and collaboration",
    "section": "",
    "text": "Improver1 makes a copy of the whole repository (we call this a “clone”) into the space in front of them. This means making a copy of the single commit. \nImprover1 does a “checkout” on that commit. This means making another copy of the commit (including the name, but not the comment) and the paper plane, as a starting point for work. \nImprover1 makes an improvement to the checked out copy. Take the nose of the plane and fold it back. It should look like this:\n\n\n\nCheck this new version into your repository. Cross out the copied version name (just a single line, keep it readable) and write a new name below it (e.g., VGDU). That crossed out name now shows the parent. Place this commit to the right of your repository. \nTake a pink postit note and write on it “Please come get VGDU and pass it to the Originator. This is your pull request. \nThe Originator will then do a pull by looking at VGDU in Improver1’s repository, make a copy and check it into their own repository. \nImprover2 will then clone the Originator’s repository. This means making a new copy of both commits and placing them in front of Improver2. \nImprover2 will then do a checkout which means making another complete copy of VGDU (which is the work as it was when Improver1 finished). \nImprover2 can then do new work. Fold the tips of each wing up. The plane should now look like this (see the folded nose from Improver1 and the newly folded up wing tips?):\n\n\n\n\nfolded nose\n\n\n\n\n\nv12\n\n\n\nImprover2 can then commit that work back into their repository. Cross out the existing name (VGDU) and create a new name (e.g., VFFD), add a comment about the work that you’ve done. \nImprover2 take a pink postit note, “Please come get ” (replace  with the name starting with a V that you chose, e.g., VFGT) \nOriginator should pull Improver2’s work by making a full copy of Improver2’s commit, then merge it into their repository. \nImprover1 should then synchronize with the Originator by making a pull (make a full copy of the new last commit in Originator’s repo, and place it in their own repository).",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Paper Planes Exercise 2: Version control and collaboration</span>"
    ]
  },
  {
    "objectID": "skills/paper_planes_git.html#parallel-mergeable-work",
    "href": "skills/paper_planes_git.html#parallel-mergeable-work",
    "title": "13  Paper Planes Exercise 2: Version control and collaboration",
    "section": "13.2 Parallel mergeable work",
    "text": "13.2 Parallel mergeable work\nSometimes people work at the same time, rather than in a sequence as above. We will simulate this.\n\nImprover1 should checkout a copy of the last commit in their repo (which should be Improver2’s wing tip folds) (Yes, this means making a full new copy)\nImprover2 should do the same.\nImprover1 should add a design to the left wing of the plane, using a pen (maybe a star or lightening bolt)\nImprover2 should add a design to the right wing of the plane, also using a pen (maybe a heart or question mark)\nBoth should check that work into their repository (crossing out the old V name and creating new random V name and adding a comment).\nBoth should send a pink postit to the Originator syaing “Come get my V name”.\nAll work together to make a new copy of each new commit.\nThe Originator pulls work from Improver1 into their repository and merges it in.\nThen the Originator pulls work from Improver2. This can complete automatically because the changes don’t conflict with each other; they are in different places and nothing prevents a plane from having a design on it’s left wing and on it’s right wing at the same time.\nEach Improver should synchronize their repository, pulling this new commit across. Note that the parent of this commit will be different in each of their repositories (because each has their own work as the base, and then the merged work).",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Paper Planes Exercise 2: Version control and collaboration</span>"
    ]
  },
  {
    "objectID": "skills/paper_planes_git.html#parallel-conflicting-work",
    "href": "skills/paper_planes_git.html#parallel-conflicting-work",
    "title": "13  Paper Planes Exercise 2: Version control and collaboration",
    "section": "13.3 Parallel conflicting work",
    "text": "13.3 Parallel conflicting work\nAbove we saw what happens when two people work at the same time. In that case git was able to merge the work automatically. But some changes can be incompatible, and create what is called “an edit conflict”. Then we have some choices to make … and there can be social repercussions.\n\nBoth Improver1 and Improver2 should checkout a copy of the last commit they synchronized from the Originator’s repository.\nImprover1 should edit the plane by unfolding the nose. Then check that commit into their repo (crossing out the parent name, creating a new one and adding a comment.)\nImprover2 should edit the plane by double folding the nose. Then check that commit into their repo (crossing out the parent name, creating a new one and adding a comment.)\nBoth improvers should send a Pull Request using a pink postit.\nThe Originator should pull Improver2’s change (making a copy) and merge it into their repo (make sure the parent lines up).\nThen the Originator should pull Improver1’s change (everyone helps make a copy) and place it in front of them.\n\nThe conflict exists because the nose can’t be both double folded and unfolded.\nThe Originator now has to make a decision. They could reject Improver1’s changes, or they could make a third completely new change and check that into the repository.\nThere are a few ways that projects handle this situation:\n\n“Benevolent Dictator”. The Originator just decides on their own.\n“Voting”. They group votes and majority rules (the Originator follows the overall wishes)\nConfiguration. They make the software complex enough to have a run-time configuration setting so that everyone can determine for themselves how it will work.\nThe project splits … Improver1 is upset that their change wasn’t accepted, they schism and now we have two, incompatible projects out in the world (sometimes called a “hard fork” or an “unfriendly fork”.)",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Paper Planes Exercise 2: Version control and collaboration</span>"
    ]
  },
  {
    "objectID": "skills/git_basic_workflow.html",
    "href": "skills/git_basic_workflow.html",
    "title": "14  Git basic workflow",
    "section": "",
    "text": "14.1 Overview\nIn this exercise, we will practice basic Linux command lines, including ls, cd, mkdir, touchand basic git commands including git status, git add, git commit, and git log.\nOnce we are able to move around in the shell, create files and directories, then we are ready for the basic git workflow, which is:",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Git basic workflow</span>"
    ]
  },
  {
    "objectID": "skills/git_basic_workflow.html#overview",
    "href": "skills/git_basic_workflow.html#overview",
    "title": "14  Git basic workflow",
    "section": "",
    "text": "edit a file\nsave those edits\ngit add\ngit commit -m \"commit message\"\n\n\nedit → save → add → commit",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Git basic workflow</span>"
    ]
  },
  {
    "objectID": "skills/git_basic_workflow.html#working-with-files-and-the-commandline-in-rstudio",
    "href": "skills/git_basic_workflow.html#working-with-files-and-the-commandline-in-rstudio",
    "title": "14  Git basic workflow",
    "section": "14.2 Working with files and the commandline in Rstudio",
    "text": "14.2 Working with files and the commandline in Rstudio\nGoal of this step: get familiar with basic Linux command line instructions:\n\npwd, which shows the path to your current working directory\nls, which lists the contents of your current directory\ncd, which lets you change the directory you’re in\nmkdir, which makes a new directory\ntouch, which creates a new (empty) file\nrm, which removes files and directories\n\n\n\n\n\n\n\nCleaning your terminal\n\n\n\n\n\nIf your screen is full of unwanted text, hit CTRL+L to clear it.\n\n\n\nLog in to the EDU Pod Rstudio interface: https://edupod.cns.utexas.edu/rstudio/\n\nUse the same username and password you use to log into UTDirect and Canvas. You should see a screen that looks like the below. This is the interface for working with R, which we’ll come back to later in the course.\n\nFor now we’re interested in getting to the terminal. You should see a tab labeled Terminal, marked in red above.\n\n\n\n\n\n\nGetting your terminal back\n\n\n\n\n\nYou may not see a terminal tab, or in the future might accidentally exit out of it. To get the terminal back, you can either use the toolbar at the top of the screen with Tools → Terminal → New Terminal, or use the keyboard shortcut ALT+SHIFT+R.\n\n\n\nYou should be greeted by a mostly blank screen, with a line that looks like this near the top:\nwab773@educcomp04:~$\nThis basically just says who I am, wab773, that I am signed in to a computer called educcomp04, and that I am in a directory called ~. The dollar sign indicates that I can type a command after it.\nWhen you perform actions in a terminal, they are performed in what is called your “working directory”. This just means that if you tell your computer to say, make a file, it will default to making it right where it thinks you are at that moment. So first, we want to know how to make sure we know where the computer thinks we are.\nType pwd in the terminal and hit the ENTER key. (You always have to hit ENTER to tell the computer to execute the command.) You should see something like this:\nwab773@educcomp04:~$ pwd\n/stor/home/wab773\nThis is where the computer thinks we are, and where it will assume we want it to do things we tell it to do (unless we tell it otherwise).\nFeel free to copy and paste commands from here to the terminal - you need to hit CTRL+SHIFT+V to paste instead of just `CTRL+V``.\nType ls in the terminal. It will list the files and directories in the current working directory.\n\nType touch instructions.txt in the terminal to create a new text file named “instructions”. We’re actually running a program called touch with the argument instructions.txt. When the touch program runs, it looks for its first argument, then makes a file with that name - in this case instructions.txt. Type ls to see that you’ve successfully made the file.\nwab773@educcomp04:~$ touch instructions.txt\nwab773@educcomp04:~$ ls\ninstructions.txt  R\nNote that just when we ran the touch command, the computer didn’t say anything - it just did its task and asked us for the next command. Many commands are like this - if they don’t encounter any problems running, they won’t display any output.\nAt times you’ll want to remove files you’ve created. In this case, we actually want to make instructions.txt somewhere else and so we need to remove the file. You can remove files with the rm command. It works much like touch - the argument you pass to it is the file that rm will try to delete. Type ls to verify the file has been deleted.\nwab773@educcomp04:~$ rm instructions.txt\nwab773@educcomp04:~$ ls\nR\nRight now we’re in a special directory called the “home” directory which is unique to every user. This is similar to your desktop on your computer, or “My Documents” on Windows: someone else logged into your computer on a different account will see different things on their desktop and in their “My Documents” folder.\nWe want to be a bit more organized rather than just putting files everywhere (think of a desktop cluttered with dozens of files), so we’ll make a new directory for this exercise. We can make directories with the command mkdir. Using the mkdir command is just like touch and rm - what you put after the command is the name of the directory you want to make.\nType mkdir air_plane_exercise in the terminal. It will create a new directory with a specified name in the file system. Verify that you’ve successfully made the new directory with ls.\nwab773@educcomp04:~$ mkdir air_plane_exercise\nwab773@educcomp04:~$ ls\nair_plane_exercise  R\nYou may notice that ls makes the “air_plane_exercise” directory appear a little different than the file “instructions.txt” above. This can be a handy way of telling directories and files apart.\n\n\n\n\n\n\n\nRemoving directories\n\n\n\n\n\nYou can remove directories with rm, but you need to type rm -r [DIRECTORY] to do so.\n\n\n\nNow we want to tell the computer that we want future commands to take place inside the directory we’ve just made - we don’t automatically enter a directory just because we made it! To move into a directory, use the cd command. Type cd air_plane_exercise in the terminal to change the current working directory to air_plane_exercise, and use pwd to verify you’ve entered the directory.\nwab773@educcomp04:~$ cd air_plane_exercise/\nwab773@educcomp04:~/air_plane_exercise$ pwd\n/stor/home/wab773/air_plane_exercise\nNote that the text before the $ changed to show our new location. This is a useful way to check that the computer thinks we’re in the right spot - doing something in the wrong directory is a common enough mistake that by default most terminal applications show this.\n\n\n\n\n\n\nGetting back home\n\n\n\n\n\nThe ~ indicates the home directory. You can almost always use ~ in commands to refer to the home directory, so cd ~ will take you to your home directory if you get lost.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Git basic workflow</span>"
    ]
  },
  {
    "objectID": "skills/git_basic_workflow.html#creating-a-git-repository-repo",
    "href": "skills/git_basic_workflow.html#creating-a-git-repository-repo",
    "title": "14  Git basic workflow",
    "section": "14.3 Creating a git repository (“repo”)",
    "text": "14.3 Creating a git repository (“repo”)\nGoal of this step: learn git init.\nType git init in the terminal. The git init command is typically used to start a new repository or to convert an existing project into a Git repository. On success, you should see something like the below:\nwab773@educcomp04:~/air_plane_exercise$ git init\nInitialized empty Git repository in /stor/home/wab773/air_plane_exercise/.git/\n\n\n\n\n\n\nRemoving git from a directory\n\n\n\n\n\nIf you make the wrong directory into a repository by mistake, you can undo that by going to the directory with cd and then removing the hidden .git directory there with rm -r .git.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Git basic workflow</span>"
    ]
  },
  {
    "objectID": "skills/git_basic_workflow.html#git-status-add-commit",
    "href": "skills/git_basic_workflow.html#git-status-add-commit",
    "title": "14  Git basic workflow",
    "section": "14.4 Git status, add, commit",
    "text": "14.4 Git status, add, commit\nGoal of this step: learn git status, git add, and git commit\nWe’ve got a Git repository now, but there’s nothing in it. Let’s re-make our instructions.txt file with touch instructions.txt.\nNow we’ve got a file in the repository - but what does this mean? Helpfully, git has another subcommand, git status, which shows the current state git thinks our repository is in.\nwab773@educcomp04:~/air_plane_exercise$ touch instructions.txt\nwab773@educcomp04:~/air_plane_exercise$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        instructions.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nThe main takeaways from the response from git status are:\n\nGit says we haven’t committed anything into the repository yet.\nGit sees that we have a file instructions.txt.\nGit says it hasn’t been told to “track” that file.\n\nWe do want that file to be tracked, so we can git add the file per the command’s suggestion. The git add command works like most of the others we’ve dealt with - we just tell it the name of the file to add, and it will do so. Using git status, we can now see the file is now being tracked.\nwab773@educcomp04:~/air_plane_exercise$ git add instructions.txt\nwab773@educcomp04:~/air_plane_exercise$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   instructions.txt\nWe want “instructions.txt” to actually say something, so let’s make some changes to the file save it. Open a file in Rstudio with File → Open File:\n\n\nJust make some changes to the file and save it (you can use CTRL+S or File →). Rstudio indicates when files have unsaved changes by making the filename red and adding an asterisk to it, like so:\n\nSo we’ve got a tracked file and some changes. Are we ready to commit? Let’s see what git status has to say.\nwab773@educcomp04:~/air_plane_exercise$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   instructions.txt\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   instructions.txt\nSo Git sees our instructions.txt file and is tracking it, but it says there are “Changes not staged for commit”. This means that while it knows we are interested in tracking the file, we haven’t told it we want the changes we just made to be commited to the repository.\nType git add instructions.txt in the terminal to stage changes for a commit. Type git status to verify that Git now sees we want to commit the instructions we typed.\nwab773@educcomp04:~/air_plane_exercise$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   instructions.txt\n\n\n\n\n\n\nAdding all files\n\n\n\n\n\nIt can become tedious to type in all of the files you want added to your repository. As a shortcut, you can type git add . to track all files and changes to Git.\n\n\n\nSince Git isn’t complaining about anything, if we commit then the current state of the directory will be committed.\nType git commit -m \"paper plane1\"to save changes to the local repository. It takes all of the changes staged with git add and stores them as a new commit with a message describing the changes.\nwab773@educcomp04:~/air_plane_exercise$ git commit -m \"paper plane1\"\n[master (root-commit) ddca4f4] paper plane1\n&lt;long output excluded&gt;\n\n\n\n\n\n\nForgetting -m message\n\n\n\n\n\nIt’s very easy to just type git commit and forget to type a message. In most cases, this will put you in an obtuse text editor called “vim”. While powerful, that editor is both very difficult to use and not part of our class. You can safely exit that editor by typing :cq (these should appear in the bottom left of your screen) and hitting ENTER. If that doesn’t work, try hitting ESC and trying again. If that doesn’t work, you can exit the terminal by clicking the “X” by the “Terminal” tab and launching a new terminal. See “Getting your terminal back” above.\n\n\n\nType git status to check status again.\nwab773@educcomp04:~/air_plane_exercise$ git status\nOn branch master\nnothing to commit, working tree clean\nThis message means that Git doesn’t see any changes between our directory and the most recent commit.\nLet’s make some more changes:\n\nedit “instructions.txt”, save it, git add it, git commit it\ncreate another text file named “license.txt”, edit/save it, git add it, git commit it",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Git basic workflow</span>"
    ]
  },
  {
    "objectID": "skills/git_basic_workflow.html#sec-gitlog",
    "href": "skills/git_basic_workflow.html#sec-gitlog",
    "title": "14  Git basic workflow",
    "section": "14.5 Using git log to understand what is in the repo",
    "text": "14.5 Using git log to understand what is in the repo\nGoal of this step: learn git log\nType git log in the terminal to display the commit history. It will show a list of all commits in the current branch, along with information about the author, date, and commit message for each one.\nThe latest message will show at the top and the oldest will show at the bottom.\n\nYou can also use git log --oneline --abbrev-commit --all --graph to show git log in short. \nIn class we will mostly add --color to this as well:\ngit log --oneline --abbrev-commit --all --graph --decorate --color\nYou can learn more about reading the output of that command here: https://stackoverflow.com/questions/22313343/git-graph-what-do-the-lines-and-asteriks-denote\nThe * characters show a single commit, the lines help us understand the branches.\nThat command is long and quite hard to remember. Fortunately, Git allows us to specify an “alias”, effectively letting us define a new subcommand that does all of that:\ngit config --global alias.viz 'log --oneline --abbrev-commit --all --graph --decorate --color'\nNow, if you type git viz in the future, it will act as if you’d typed that entire command!\n\n\n\n\n\n\nForgetting –global\n\n\n\n\n\nThe --global flag tells Git that you want to have the git viz subcommand available in all repositories on your computer. If you forget that flag, you’ll have that subcommand in your current repository, but no others!",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Git basic workflow</span>"
    ]
  },
  {
    "objectID": "skills/git_basic_workflow.html#git-commands",
    "href": "skills/git_basic_workflow.html#git-commands",
    "title": "14  Git basic workflow",
    "section": "14.6 Git Commands",
    "text": "14.6 Git Commands\n\nGit init\ngit init creates a new repository.\nGit add\ngit add [file] is a command used in Git to stage changes for a commit. It allows you to select which changes in the working directory will be included in the next commit.\nGit commit -m “message”\ngit commit saves changes to the local repository. It takes all of the changes staged with git add and stores them as a new commit with a message describing the changes. It is important to remember the quotes around your message so Git knows you want the entire message as the commit message.\nGit status\ngit status shows the state of the working directory and the staged changes, and it indicates which branch you are currently on.\nGit log\ngit log is to display the commit history of a repository. It shows a list of all commits in the current branch, along with information about the author, date, and commit message for each one.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Git basic workflow</span>"
    ]
  },
  {
    "objectID": "skills/git_rewinding_work.html",
    "href": "skills/git_rewinding_work.html",
    "title": "15  Rewinding work",
    "section": "",
    "text": "15.1 Prep exercise.\nYour task is to create a git repository that when you run our git viz command, your screen shows this result (the commit hash abbreviations, like 1b2162e will vary on your repo)\nIf git viz is not working on your EduPod account, revisit Section 14.5\nHint: You will need to start by making a directory called test-rewind then using cd test-rewind to change into it, and using git init to establish a git repo.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Rewinding work</span>"
    ]
  },
  {
    "objectID": "skills/git_rewinding_work.html#prep-exercise.",
    "href": "skills/git_rewinding_work.html#prep-exercise.",
    "title": "15  Rewinding work",
    "section": "",
    "text": "test-rewind % git viz                         \n* 50590c5 (HEAD -&gt; main) made third edit\n* 39f89db made second edit\n* 1b2162e made first edit",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Rewinding work</span>"
    ]
  },
  {
    "objectID": "skills/git_rewinding_work.html#why-rewind",
    "href": "skills/git_rewinding_work.html#why-rewind",
    "title": "15  Rewinding work",
    "section": "15.2 Why rewind?",
    "text": "15.2 Why rewind?\nWhen we are working we often want to try things out before we are 100% sure that they will work. We want to be able to experiment and find our way through a problem. If our experiment doesn’t work, we want to be able to step backwards in time, to find an earlier version that is a good new starting point.\nIn many ways this is identical to the idea of a “save point” in a game. We can step backwards in time and try again. We can reload that point at any time in the future. In our paper plane analogy, we can reach out and grab any tray in our repository.\nGit enables us to save full copies of our working directory. We can then get back to the state of our work at any time we made a commit. When we check out a historical state, we get the files and the folders as as they were. So git actually swaps out the directory.\nWhen I first started using git, I found this a bit confusing. usually when one restores from a backup, it is more like downloading a file. One gets to choose:\n\nwhat to call the newly obtained older version\nwhere to put it\nwhat to do if there is a file that would be over-written.\n\nWhat git does, though, is it swaps out all the files and folders with the previous version.\nAs we’ve seen, though, git is more fine-grained than a video game save-point. We often have files that have changed that we don’t want included in our save-point, this is why we have the git add stage before git commit.\nThus we can have untracked files or folders hanging around in our working folder. Git won’t change these when we do a checkout. So what happens is:\n\ngit checks that all tracked files are in a “clean” state. This means that they are unchanged from the last commit. This is git checking that you have “saved your work” before it swaps out the files.\ngit goes to its repository, locates the commit you ask for, and swaps all the tracked files and folders in the working directory.\ngit remembers what commit you’ve moved to, so that if you make edits you can decide how they should be applied into the stream of commits in your repository.\n\nQuestion for you to answer: What happens to untracked files when you run a git checkout\nTo move backwards in time we use the git checkout command. We have to let git know which commit we want to go back to. We can specify that using the name that git uses, which is the hash (e.g., 1b2162e) shown by git log.\nStarting with our 3 commit test-rewind repo:\njlh5498@INFO-A64206 test-rewind % git viz\n* 50590c5 (HEAD -&gt; main) made third edit\n* 39f89db made second edit\n* 1b2162e made first edit\nWe can move to the first commit using\njlh5498@INFO-A64206 test-rewind % git checkout 1b2162e\nwhich produces the output\nNote: switching to '1b2162e'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 1b2162e made first edit\nIf we run our viz command we can see a little more:\njlh5498@INFO-A64206 test-rewind % git viz\n* 50590c5 (main) made third edit\n* 39f89db made second edit\n* 1b2162e (HEAD) made first edit\nSee how the word HEAD now appears on the bottom line and not the top line? This is git’s way of telling us what is checked out.\nWhen git says detached HEAD (a little intense sounding) git is highlight for us that our current working directory is not at the last commit. This means that if we try to make a new commit git wants us to know that it won’t just pop onto the top of the repo like usual.\nFor now, though, we can inspect files back at this version, and we can shift to another version (using checkout). For example we can move back to our top commit, using git checkout main.\nIf you see a error: pathspec 'main' did not match any file(s) known to git use git checkout master (newer git installs use main and older installs use master).\njlh5498@INFO-A64206 test-rewind % git checkout main\njlh5498@INFO-A64206 test-rewind % git viz\n* 50590c5 (HEAD -&gt; main) made third edit\n* 39f89db made second edit\n* 1b2162e made first edit\nNotice how HEAD now points to the top commit? If we edit/add/commit our commits will drop back on top.\njlh5498@INFO-A64206 test-rewind % git add README \njlh5498@INFO-A64206 test-rewind % git commit -m \"Made fourth edit\"\n[main ff7997b] Made fourth edit\n 1 file changed, 1 insertion(+)\njlh5498@INFO-A64206 test-rewind % git viz\n* ff7997b (HEAD -&gt; main) Made fourth edit\n* 50590c5 made third edit\n* 39f89db made second edit\n* 1b2162e made first edit\nWhile we can always use the hash abbreviations like 50590c5 as names for commits, there is also a relative syntax.\ngit checkout HEAD~1\nwill get the commit one back from where HEAD is currently pointing. HEAD~2 will be 2 back, and so on. HEAD~ (without any number after the tilde) is a shortcut for HEAD~1\nRemember, git swaps out all the tracked files when you do a checkout. If you have untracked files you will find they are unaffected by a git checkout. Create a file called my-untracked-file run git status then run git checkout &lt;earlier-commit&gt; (where &lt;earlier-commit&gt; is a hash for your first commit), then run git status again.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Rewinding work</span>"
    ]
  },
  {
    "objectID": "skills/git_rewinding_work.html#undo",
    "href": "skills/git_rewinding_work.html#undo",
    "title": "15  Rewinding work",
    "section": "15.3 Undo",
    "text": "15.3 Undo\nSometimes (well often, really) we need to undo things we’ve done in git. Unfortunately there isn’t one Ctrl-Z type undo process in git. Here are three common scenarios with our edit, save, add, commit cycle.\n\n15.3.1 git restore –staged Undo adding files (before commit)\nWhen we add a file, we are placing the file onto the tray, ready to copy into the repository. In git language we use git add we are “staging” a set of changes ready to commit. If we run git status we will see the files added under Changes to be committed (usually shown in green).\nSometimes we accidentally add files with changes that we don’t want to include in the commit (e.g., because they are unrelated to the current set of changes and would just clutter the commit up for people trying to understand it)\nHelpful, the output of git status helps coach us how to fix this. We can use git restore --staged &lt;file&gt; This works with individual files, but &lt;file&gt; can also refer to a folder, in which case all the files inside that folder will be unstaged.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Rewinding work</span>"
    ]
  },
  {
    "objectID": "skills/git_rewinding_work.html#revert---commits-to-undo-commits",
    "href": "skills/git_rewinding_work.html#revert---commits-to-undo-commits",
    "title": "15  Rewinding work",
    "section": "15.4 Revert - commits to undo commits",
    "text": "15.4 Revert - commits to undo commits\nOnce we have made a commit we face a different problem. Git is like a “ledger” in accounting that provides an “audit trail”: we can’t just easily delete something from history. Instead we can make a commit that reverses the mistake. One analogy that I like is that if the mistaken commit is “matter” then the revert commit is “anti-matter”, it exactly reverses all the changes of the mistaken commit. See https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/\nThis does leave the history looking a bit messy. We will explore other opportunities to tidy things up later in the course. One note at this point: if things like passwords get into the git history, it can be very difficult to entirely eliminate them from the history (and one never knows if others have unchanged copies) so generally if passwords or other secrets (like API keys) get into a git repository then it’s time to change the password or secret!",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Rewinding work</span>"
    ]
  },
  {
    "objectID": "skills/branching.html",
    "href": "skills/branching.html",
    "title": "16  Local branching with Git",
    "section": "",
    "text": "16.1 Warmup exercise\nUse the terminal to create a new git repo so that when you run our git viz command you see this output:\nRemember that for a new git repo you may have to provide a username and email address. These commands will help (you don’t need to change the names but can if you want)",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Local branching with Git</span>"
    ]
  },
  {
    "objectID": "skills/branching.html#warmup-exercise",
    "href": "skills/branching.html#warmup-exercise",
    "title": "16  Local branching with Git",
    "section": "",
    "text": "Some weird git errors can come when we accidentally have git repos inside other git repos. In particular this can happen if we accidentally make our home folder into a git repo. See discussion and fixes in Section A.2 You can find additional help in the FAQ section: Appendix A\n\n\nbranching_warmup % git viz\n* 50590c5 (HEAD -&gt; main) Wednesday\n* 39f89db Tuesday\n* 1b2162e Monday\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Local branching with Git</span>"
    ]
  },
  {
    "objectID": "skills/branching.html#branching-with-local-git",
    "href": "skills/branching.html#branching-with-local-git",
    "title": "16  Local branching with Git",
    "section": "16.2 Branching with local git",
    "text": "16.2 Branching with local git\nBranching (and merging) is a useful way to keep different tasks organized and synchronized, even when working locally with git. Below we will work through a scenario for git branching, showing the commands and two different visualizations. Eventually branching becomes a key part of working with github and shared repositories, but it is useful to approach it separately first.\n\n16.2.1 A scenario\nImagine you are running a coffee roaster. You have code that produces a daily report that is emailed to your team. Each day the point of sale system makes new data available. Each night your computer executes a script (report_script.Rmd) to access the data, create, and email the report.\nWe are going to manage a situation where we want to:\n\nexperiment and break things\nkeep things running\n\nIt is very hard to do these things at the same time. Branching helps us to do this.\nOne option might be to maintain different versions of files using different file names (report_script.Rmd and new_report_script.Rmd. This becomes very messy when we have many files and folders involved (/images and /new_images???). This is even worse when we have multiple experiments and attempts going on in parallel and entirely hopeless when we move online and are working with groups of people.\nRecall, though, that git enables us to “swap out” our working directory. Until now we’ve kept this linear, each new version added after the last. But branching enables us to keep parallel lines of commits (as though we had two lines of trays with on our paper plane repository table).\n\n\n16.2.2 Coordinating new work while keeping old work running\nCurrently the report is pretty simple, it’s just a table of sales divided up between in-store and online. Each day’s sales are added as a new row in the table.\ncd ~\nmkdir scratch_branching\ncd scratch_branching\ngit init\nInitialized empty Git repository in scratch_branching/.git/\nWe can now add the reporting script and the data for monday. To simulate editing a file using an editor we can use some fancy syntax so you can copy and paste it.\necho \"# Initial code for table report\" &gt;&gt; reporting_script.Rmd\ngit add reporting_script.Rmd\ngit commit -m \"starting setup\"\n[master (root-commit) 24bcda4] starting setup\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 data_monday.csv\n create mode 100644 reporting_script.Rmd\n\n\n\n\nThe scripts runs normally on Monday night.\nOne Tuesday morning you decide that the data would be better presented as a chart. You have some ideas but rightly decide it will take more than a day or two to get that working.\nIn the meantime you still have to produce the report. So you create a branch called towards_chart and begin working there, leaving the master branch untouched to produce the Tuesday night report.\ngit branch towards_chart\ngit checkout towards_chart\nAgain we can simulate editing the file.\necho \"# Work towards charts\" &gt;&gt; reporting_script.Rmd \ngit status\nOn branch towards_chart\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   reporting_script.Rmd\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ngit add reporting_script.Rmd\ngit commit -m \"Worked towards charts\"\n[towards_chart acc3f42] Worked towards charts\n 1 file changed, 1 insertion(+)\nOn Tuesday you see that the report ran fine (using the code in master) and you continue to work on the charts.\necho \"# More work towards charts\" &gt;&gt; reporting_script.Rmd \ngit add reporting_script.Rmd\ngit commit -m \"More work towards charts\"\n[towards_chart acc3f42] Worked towards charts\n 1 file changed, 1 insertion(+)\nOn Wednesday morning, though, you get an error from your reporting script. The online sales system updated and the data files now include a new column saying whether a sale was cash or credit. You know how to get things working again, but you still aren’t ready to launch your chart system. You don’t want to wait until your chart work is finished to get the report going again.\nSo you switch to master, edit the reporting file to handle the new column, then add and commit the change.\ngit checkout master\nSwitched to branch 'master'\nNow we are back on the master branch and we won’t see our work towards the charts at all. So over on the towards_chart branch we can work away without upsetting the working code on master.\nCheck the current content of the script (will show nothing about charts)\ncat reporting_script.Rmd\nInitial code for table report\nSo now we can, without involving our work towards the chart, make the bugfix on master.\necho \"# Fix to match new data format\" &gt;&gt; reporting_script.Rmd\ngit add reporting_script.Rmd\ngit commit -m \"A fix to match new data format\"\nNow if we run our git viz command:\ngit viz\nwe will see our branching starting to show up:\njlh5498@educcomp04:~/scratch_branching$ git viz\n* 48afd7c (HEAD -&gt; master) A fix to match new data format\n| * 5c7fc76 (towards_chart) More work towards charts\n| * c72d745 Worked towards charts\n|/  \n* c434df6 starting setup\nHappily the report runs fine on Wednesday night.\nThursday morning you switch back to the towards_chart branch and are pleased to get things working.\ngit checkout towards_chart\necho \"# Code to finalize the charts\" &gt;&gt; reporting_script.Rmd \ngit add reporting_script.Rmd\ngit commit -m \"Finished up the charts\"\nYou are ready to add the chart into the report by moving the code to the master branch.\nBut if you just merge the code back to master you may find that the code for the chart doesn’t work with the change to handle the updated data files. So you may have some merging to do. But you don’t know if you can get that done before the report has to run, and you don’t want to get caught fiddling with master because if the report tries to run you could end up with nothing going out that night.\nSo you first merge master over to your towards_chart branch, and ensure that things work well and the two pieces of work done in parallel work well together (charts and dealing with the new column).\nFirst confirm which branch you are in, this command lists the branches and the one highlighted with the * is the current branch. git status can also show you.\ngit branch -v \ngit branch -v\n  master          576bc90 A fix to match new data format\n* towards_chart bef7b72 Finished up the charts\nThen merge over the master branch into the towards_chart branch.\ngit merge master\nAuto-merging reporting_script.Rmd\nCONFLICT (content): Merge conflict in reporting_script.Rmd\nAutomatic merge failed; fix conflicts and then commit the result.\nAh, good thing we did this on the branch because we do end up with a conflict. Git can resolve some conflicts but not all. Git shows conflicts by adding special lines of text into the file (using &gt;&gt;&gt;&gt;&gt;&gt; and &lt;&lt;&lt;&lt;&lt; as indicators. To resolve them we remove those lines and leve the file the way we want it to be.\n# Initial code for table report\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n# Work towards charts\n# More work towards charts\n# Code to finalize the charts\n=======\n# Fix to match new data format\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\nThe parts separated by ======== show edits that conflict. Looking at this we can see that we want all the lines, so we edit the file to show:\n# Initial code for table report\n# Fix to match new data format\n# Work towards charts\n# More work towards charts\n# Code to finalize the charts\nNow we can save that file. Git knows that we are fixing a conflict, so git status shows:\nOn branch towards_chart\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n    both modified:   reporting_script.Rmd\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nAnd now we can add and commit to finish the merge.\ngit add reporting_script.Rmd\ngit commit -m \"merged bug fix with charts code\"\n[towards_chart e420a05] merged bug fix with charts code\n(Git can only flag syntactical conflicts, not semantic conflicts, so one would also try running some test reports to make sure things are all working).\nSo once you’ve resolved all issues, then you can merge the towards_chart branch back to master, signalling that you are ready to launch your new report with charts.\ngit checkout master\ngit merge towards_chart\nSwitched to branch 'master'\nUpdating 576bc90..e420a05\nFast-forward\n reporting_script.Rmd | 3 +++\n 1 file changed, 3 insertions(+)\nFinally we can visualize this branching, editing, and merging in two ways. First we can use this handy command to see a visualization in the command line.\ngit viz\nWhich will show us this (using an image here because the color doesn’t copy):\n\nWe can also see this visually using learngitbranching, see the short video below.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Local branching with Git</span>"
    ]
  },
  {
    "objectID": "skills/branching.html#exercises-in-class",
    "href": "skills/branching.html#exercises-in-class",
    "title": "16  Local branching with Git",
    "section": "16.3 Exercises (in-class)",
    "text": "16.3 Exercises (in-class)\n\nGo to “Learn Git Branching” site: https://learngitbranching.js.org/. (Note that this site is multi-locale, see the small planet icon in the bottom right?)\nDo exercises 2 and 3 (“Branching in Git” and “Merging in Git”)\nShift back to the terminal and replicate the “Merging in Git” lesson. You will need to start with these commands (to create a new, empty, repo):\n\ncd ~\nmkdir replicate_learngitbranching\ncd replicate_learngitbranching\ngit init\nRemember that when we are working in the terminal it is different from learngitbranching because we have to actually create, edit, and save files before we can commit. We also have to use git commit -m 'some message' rather than just git commit.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Local branching with Git</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html",
    "href": "skills/github_solo.html",
    "title": "17  GitHub solo",
    "section": "",
    "text": "17.1 Warmup exercise\nThus far your repositories have all been in your local filespace. This is often on a laptop, although for consistency this semester as we learn, we have been creating and using repos on edupod.\nEven when working on one’s own (solo), it can be convenient to have a backup in the cloud. Git hosting services provide this. Examples include Github, GitLab, and BitBucket. As we will see later, these services also provide a platform for collaborating with others, but they work just as well as a backup for solo work.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#create-a-github-account",
    "href": "skills/github_solo.html#create-a-github-account",
    "title": "17  GitHub solo",
    "section": "17.2 Create a GitHub account",
    "text": "17.2 Create a GitHub account\nYou will need to have a working GitHub account. You are welcome to use an existing Github account (if you happen to have one), or you can create one just for this course (a “throwaway”) or you can use your real name and plan to retain this account for your professional life. Whichever you choose you will need a working email address associated with the account (to confirm and see the notifications).",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#create-a-repository-on-github",
    "href": "skills/github_solo.html#create-a-repository-on-github",
    "title": "17  GitHub solo",
    "section": "17.3 Create a repository on GitHub",
    "text": "17.3 Create a repository on GitHub\nOnce you are logged into GitHub you can create a repository using the “New Repository” button (which is usually green colored).\nYou will need to give two things:\n\nA repository name. I suggest that you use a prefix of i320d- for all the repos used in this class. That will ensure you can easily clean them up later.\nBe sure to select “Add a README file” under the Initialize this repository with … section.\n\nOnce you’ve created the repository you will see a “Quick Setup” page. This shows you the URL of the repository that you’ve created. This is how mine looks:\n\nYou should copy the URL using the little grey box-on-box on the right.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#clone-the-repo-to-your-local-space",
    "href": "skills/github_solo.html#clone-the-repo-to-your-local-space",
    "title": "17  GitHub solo",
    "section": "17.4 Clone the repo to your local space",
    "text": "17.4 Clone the repo to your local space\nNow that we have an empty repo on Github, we can bring it down to our local space. This uses a git command called git clone.\nGo to the Terminal on edupod.\nBefore running git clone, everyone needs to ensure they are in a folder that is not inside another repo. You can place repos anywhere you want. I suggest placing them all into your home folder on edupod. You can be sure you are there by running this command (read as “cd tilde” because tilde is a shortcut for your home directory).\ncd ~\nTo be sure that you aren’t inside another repo you can run git status and you want to see a fatal error.\ngit status\nfatal: not a git repository (or any parent up to mount point /stor/home)\nStopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).\nIf you do not see the fatal error, then you need to move up in your folder hierarchy until you are not in a repo. Use cd .. or cd ~. If you still get that error and you are in your home folder, see FAQ for “I accidentally made my home folder a git repo” at Section A.2\nThen clone your repository and change directory into it.\nFor my example repo in the image above this would be:\ngit clone https://github.com/jameshowison/i320d-test1.git\ncd i320d-test1\nYou will need to replace the repo URL and the repository name to match yours. The general form looks like this (but you replace the &lt;repo_url&gt; and &lt;repository_name&gt; placeholders.)\ngit clone &lt;repo_url&gt;\ncd &lt;repository_name&gt;",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#editsaveaddcommit-as-usual",
    "href": "skills/github_solo.html#editsaveaddcommit-as-usual",
    "title": "17  GitHub solo",
    "section": "17.5 Edit/Save/Add/Commit as usual",
    "text": "17.5 Edit/Save/Add/Commit as usual\nNow we can do our usual git stuff: We can edit a file, save it, then use git add and git commit -m \"Some message\" to store our new version in git.\nAs usual, here is a command that simulates editing and saving a file (which you can also do through the RStudio interface):\necho -e \"\\n\\nA new line in README\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"Added line to README\"\nNote that you may have to set the user.email and user.name fields. These do not have to match up with your GitHub username and/or email.\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\nNow we are ready to send data back up to GitHub. While the repo is public readable, it is not public writeable. If we try to send things up using the git push command we will see this error.\ngit push\nremote: No anonymous write access.\nfatal: Authentication failed for 'https://github.com/jameshowison/i320d-testing2024.git/'\nOnly people with special permission can add things to the repository. So we have to set up authentication. To clear anything out (and avoid being asked for these details a lot) we need to run:\ngit config --global credential.helper 'cache --timeout=10000000'",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#obtain-special-password-for-commandline-git-pat",
    "href": "skills/github_solo.html#obtain-special-password-for-commandline-git-pat",
    "title": "17  GitHub solo",
    "section": "17.6 Obtain special password for commandline git (PAT)",
    "text": "17.6 Obtain special password for commandline git (PAT)\nYour password for GitHub will give you access to the GitHub web interface, but to connect git on the commandline to GitHub we need a Personal Access Token (PAT). You can think of this as a special use password. Go to https://github.com/settings/tokens (You will need to be logged into GitHub).\n\nClick “Generate token”.\n\nChose “Generate New Token (classic)” from the drop down (not Fine-grained)\nSelect “repo” “workflow” and “user” permissions and then hit “Generate Token”\n\nYou will then be able to copy the PAT. You need to keep this somewhere you can copy from in class. I put it into my password manager (I use 1password). Note that this gives full access to your GitHub account, so if you have work stuff or other things in there, come talk to me or use a “fine-grained access token” scoped only to the repos for this class.\n\n\n\n\n\n\n\nNote\n\n\n\nWindows users may have trouble pasting the PAT into the terminal. You may have to use the right-click menu and then choose paste.\nSimilarly, right-click can also work for copy in the terminal windows.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nGitHub will only show a PAT a single time. So you must store this somewhere you can copy it from when needed. It is a password, so store it with your other passwords.\nYou should be using a password manager. Examples include 1password, LastPass, Dashlane, or perhaps a password manager associated with your browser. So store it there.\nIf you lose the PAT, you can log into GitHub and generate another (but remember to copy and save it this time).",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#send-your-changes-up-to-github",
    "href": "skills/github_solo.html#send-your-changes-up-to-github",
    "title": "17  GitHub solo",
    "section": "17.7 Send your changes up to GitHub",
    "text": "17.7 Send your changes up to GitHub\nThe git push command will move any new work from your local repo, up to GitHub.\ngit push\ngit will ask for your username/password. You should use your GitHub username, but the PAT when asked for the password. Your regular GitHub password will not work. You have to use the PAT you created in the previous step. If you didn’t copy it down, you can create a new one, don’t forget to store it somewhere so that you can copy it for use in class.\nBy default you will have to re-enter this username/PAT any time you haven’t run a git push command for 15 minutes. More details in the FAQ on this in Section A.1.3 which gets you to run:\ngit config --global credential.helper 'cache --timeout=10000000'",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#go-to-github-to-confirm",
    "href": "skills/github_solo.html#go-to-github-to-confirm",
    "title": "17  GitHub solo",
    "section": "17.8 Go to GitHub to confirm",
    "text": "17.8 Go to GitHub to confirm\nNow head to GitHub to confirm that your changes made it up to the server. You can use git remote -v as a shortcut to find the URL of the repo, if it isn’t still open in your browser. See Section A.1.4 for more.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#working-with-branches-locally-and-remotely",
    "href": "skills/github_solo.html#working-with-branches-locally-and-remotely",
    "title": "17  GitHub solo",
    "section": "17.9 Working with branches locally and remotely",
    "text": "17.9 Working with branches locally and remotely\nWe can create branches locally, and then push them up to GitHub.\ngit branch test-new-branch\ngit checkout test-new-branch\necho \"Change on new-branch\" &gt;&gt; README.md \ngit add README.md \ngit commit -m \"change on locally created branch\"\nNow we have a branch locally, but that branch is not in the repo on GitHub. This means we may see a message about needing to set an upstream branch. Something like this:\n$ git push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\nfatal: The current branch test-branch has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin test-branch\nYou can copy that suggested command within terminal and run it. This tells git to create your new branch on the origin remote.\nYou should see something like:\n:~/workspace/i320d-testing2024$ git push --set-upstream origin test-new-branch\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 315 bytes | 35.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\nremote: \nremote: Create a pull request for 'test-new-branch' on GitHub by visiting:\nremote:      https://github.com/jameshowison/i320d-testing2024/pull/new/test-new-branch\nremote: \nTo https://github.com/jameshowison/i320d-testing2024.git\n * [new branch]      test-new-branch -&gt; test-new-branch\nbranch 'test-new-branch' set up to track 'origin/test-new-branch'.\n(Remember if you see a fatal: Authentication failed message follow instructions here: Section A.1.2)",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#find-your-branch-on-github-create-and-merge-pull-request",
    "href": "skills/github_solo.html#find-your-branch-on-github-create-and-merge-pull-request",
    "title": "17  GitHub solo",
    "section": "17.10 Find your branch on GitHub, create and merge Pull Request",
    "text": "17.10 Find your branch on GitHub, create and merge Pull Request\nOn GitHub you can now find your branch. You have to view your repo on GitHub (remember Section A.1.4 for shortcut to find URL.)\nOnce you see your repo on GitHub, you can find your branch using the Branch drop-down.\n\n\n\nImage of drop down menu for branches, shows for-pull-request and master\n\n\nSelect that and you will see a “Compare & pull request button”\n\n\n\nImage of Compare and Pull Request Button\n\n\nWhen you click the green button you will see:\n\n\n\nImage showing New PR interface. A purple circle highlights the section discussed below\n\n\nNotice the purple circle that shows base: main &lt;-- compare: new-feature. Notice that the arrow points right to left. The destination of the PR comes first (here it is main) and the place we are merging from comes second (here it is new-feature).\nThe interface shows that the branches can be merged automatically. This means that the changes in the new-feature branch would not cause conflicts if merged into main.\nYou can go ahead and Create the PR.\nThis will lead to a PR page, where you could chat about the suggested changes.\n\n\n\nImage showing PR. A purple circle highlights the section discussed below\n\n\nNotice the sentence in the purple circle: jameshowison wants to merge 1 commit into main from new-feature that is a useful succinct summary of what a PR is: it is a request to merge a set of commits from one branch into another.\nIf you hit the “Merge Pull Request” button GitHub will merge the branch to main, close the PR, and suggest that you delete the branch (which you can do; all the commits from that branch are now on main/master).",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#synchronize-your-local-repo",
    "href": "skills/github_solo.html#synchronize-your-local-repo",
    "title": "17  GitHub solo",
    "section": "17.11 Synchronize your local repo",
    "text": "17.11 Synchronize your local repo\nAll the PR steps have happened on GitHub only, so they aren’t yet reflected in your local repo. We have merged new-feature to main on GitHub.\nAt this point you need to synchronize by first switching to main:\ngit checkout main\nand then get changes from the remote\ngit pull\nYou will see something like:\n~/workspace/i320d-testing2024$ git checkout main\nSwitched to branch 'main'\nYour branch is behind 'origin/main' by 2 commits, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\n~/workspace/i320d-testing2024$ git pull\nUpdating 441124e..8ba5e91\nFast-forward\n README.md | 1 +\n 1 file changed, 1 insertion(+)\nand if you run\ngit status\nyou will see that everything is synchronized. (origin/main means the branch up on GitHub)\n~/workspace/i320d-testing2024$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree clean",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_solo.html#summary-figure",
    "href": "skills/github_solo.html#summary-figure",
    "title": "17  GitHub solo",
    "section": "17.12 Summary figure:",
    "text": "17.12 Summary figure:\n\n\n\n\n\n\nsequenceDiagram\n    participant GitHub_main AS GitHub main \n    participant local \n    participant local_new AS local new-feature\n    participant GitHub_new AS GitHub new-feature\n    \n    GitHub_main -&gt;&gt;local : git clone\n    local -&gt;&gt; local_new : git checkout -b new-feature\n    local_new -&gt;&gt; local_new : edit/add/commit\n    local_new -&gt;&gt; GitHub_new : git push\n    GitHub_new -&gt;&gt; GitHub_main : Create/Merge Pull Request\n    GitHub_main -&gt;&gt; local : git checkout main / git pull",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>GitHub solo</span>"
    ]
  },
  {
    "objectID": "skills/github_collaboration.html",
    "href": "skills/github_collaboration.html",
    "title": "18  Github collaboration",
    "section": "",
    "text": "18.1 Collaboration picture\nExercises done in groups of three.\nIncidentally George Simmel in early 20th century says that everything changes when you go from 1 to 2 people (a dyad), and then again going from 2 to 3 (a triad). He said that because at 3 people it’s the first time you can be outvoted :) Check it out.\nIn the image above we can see the overall situation when people are collaborating through a git hosting service like github.\nAt the top we see the “Github Cloud” and at the bottom we see our laptop. Everything we have done so far (edit-save-add-commit and branching) happens on the laptop.\nIn the Cloud we see two repositories. The one on the right called “Upstream” (or sometimes “Project” or “Shared”) is the space where all our work will collect. The one on the left called “Origin” is our cloud copy of the shared repository. You can think of a fork as a backup space for the repo on your laptop; the fork lives in your github account namespace.\nsequenceDiagram\n    participant upstream AS upstream&lt;br /&gt;aka shared/project\n    participant origin AS origin&lt;br /&gt;aka fork\n    participant laptop AS laptop&lt;br /&gt; aka local\n    \n    upstream -&gt;&gt;origin : github fork\n    origin -&gt;&gt;laptop : git clone\n\n    \n    laptop -&gt;&gt;laptop : git branch\n    laptop -&gt;&gt;laptop : edit/add/commit\n    \n    upstream -&gt;&gt;upstream : maintainer commits&lt;br /&gt;or pull requests&lt;br /&gt;from others merged\n\n    laptop -&gt;&gt;laptop : edit/add/commit\n    \n    note over laptop : Work finished, need to&lt;br /&gt;gather changes since clone\n    \n    upstream -&gt;&gt;laptop : git pull upstream \n    laptop -&gt;&gt;laptop : resolve conflicts&lt;br /&gt;git add/commit\n    laptop -&gt;&gt;origin : git push\n    origin -&gt;&gt;upstream : github pull request\nThere are 6 steps to this workflow (also depicted in diagram below)\nThe pull request can then be merged by the maintainer of the upstream repo.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Github collaboration</span>"
    ]
  },
  {
    "objectID": "skills/github_collaboration.html#collaboration-picture",
    "href": "skills/github_collaboration.html#collaboration-picture",
    "title": "18  Github collaboration",
    "section": "",
    "text": "We create a fork of the upstream repo. This happens on github.\nBring that fork down to our laptop where we can work on it. This is done using git clone a command that is run on the laptop. We pass git clone the URL of the fork.\nUse git branch and git checkout to create a branch, then the edit-save-add-commit as usual.\nSynchronize using git pull upstream to get any work that has happened in upstream since you cloned your fork. Such work might come from the maintainers of the project doing their own work there, or the maintainers merging in pull requests from other contributors. This is quite similar to merging main to our branches if working locally.\nUse git push to move your new edits up to github. Note that they go to your fork, not directly to upstream.\nCreate a pull request on github. We do this while looking at our fork. This lets the upstream repo know that you have work ready to contribute.\n\n\n\nA PR is a request for the maintainer of the upstream repo to run a git pull from your branch on your fork into their repository",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Github collaboration</span>"
    ]
  },
  {
    "objectID": "skills/github_collaboration.html#basic-forking-workflow-setup",
    "href": "skills/github_collaboration.html#basic-forking-workflow-setup",
    "title": "18  Github collaboration",
    "section": "18.2 Basic forking workflow setup",
    "text": "18.2 Basic forking workflow setup\n\nGroup of three: Contributor A, Maintainer, Contributor B.\n\nArrange your chairs so that you can see each others screens. That means sitting in a row so you can easily see what each other are seeing. Maintainer sits in the middle.\n\n\n\n\n\nflowchart LR\n  ContributorA---|left of|Maintainer---|right of|ContributorB\n\n\n\n\n\n\n\nMaintainer creates new repository on github.\nContributor A and Contributor B log into github, find the new repository created by Maintainer and fork it.\n\n\n\n\nImage showing fork button in top right\n\n\n\nContributor A and Contributor B should clone their fork repo to their working space.\n\nBefore running git clone, everyone needs to ensure they are in a folder that is not inside another repo. You can place repos anywhere you want. I suggest placing them in your home folder. You can be sure you are there by running this command (read as “cd tilde” because tilde is a shortcut for your home directory).\ncd ~\nTo be sure that you aren’t inside another repo you can run git status and you want to see a fatal error.\ngit status\nfatal: not a git repository (or any parent up to mount point /stor/home)\nStopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).\nIf you do not see the fatal error, then you need to move up in your folder hierarchy until you are not in a repo. Use cd .. or cd ~. If you still get that error and you are in your home folder, see FAQ for “I accidentally made my home folder a git repo” at Section A.2\nThe contributors will have their own github username in the fork URL. You can quickly copy that with this button on github.\n\n\n\nImage showing button that copies the URL\n\n\nThen clone your repository and change directory into it.\n\ngit clone &lt;fork_repo_url&gt;\ncd &lt;repository_name&gt;\n\n\nEstablish remotes. Contributor A and Contributor B will specify the shared repository as “upstream”.\n\n\ngit remote add upstream &lt;maintainers_repo_url&gt;\n\nIf setup properly then the git remote -v command will show four lines for Contributor A and Contributor B:\ngit remote -v\norigin  &lt;fork_repo_url&gt; (fetch)\norigin  &lt;fork_repo_url&gt; (push)\nupstream &lt;maintainers_repo_url&gt; (fetch)\nupstream &lt;maintainers_repo_url&gt; (push)\n\n\n\n\n\n\nNote\n\n\n\nNote that git automatically creates the origin remote as whatever URL was used with git clone.\n\n\nEach exercise below assumes this setup as the starting point.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Github collaboration</span>"
    ]
  },
  {
    "objectID": "skills/github_collaboration.html#sharing-work-and-synchronizing",
    "href": "skills/github_collaboration.html#sharing-work-and-synchronizing",
    "title": "18  Github collaboration",
    "section": "18.3 Sharing work and synchronizing",
    "text": "18.3 Sharing work and synchronizing\nRequires three part repository setup as shown above in Basic forking workflow setup\nThe contributors are each going to do some work, then pass it up through their forks to the upstream shared repository. This will use git push and Github pull requests (which the Maintainer will see and approve). We will then use git pull upstream so that each contributor gets the work that the other has done.\n\nContributor A, Contributor B should create a new branch and switch to it (replace YOUR_ROLE_NAME with either contributorA or contributorB):\n\n\ngit branch YOUR_ROLE_NAME-new-branch\ngit checkout YOUR_ROLE_NAME-new-branch\n\n\nContributor A, Contributor B each create a file named after their role (ie contributorA.txt, contributorB.txt). You can use an editor to create and save the file, or you can create a file with some simple content using:\n\necho \"A line of content\" &gt;&gt; YOUR_ROLE_NAME.txt\n(replace YOUR_ROLE_NAME with contributorA or contributorB)\n\nAdd and commit your new file.\n\n\ngit add YOUR_ROLE_NAME\ngit commit -m \"Contributing a file\"\n\n\nPush your new file. By default git push uses origin as the destination (so this new branch and file will go to your fork)\n\n\ngit push\n\n\n\n\n\n\n\nNote\n\n\n\nIf you have trouble with GitHub authentication, remember that it is the email address associated with the GitHub account and the password has to be a PAT. That is the special password you copied from the GitHub site. See Chapter 17 for details.\n\n\nYou may also see a message about having an upstream branch. Something like this:\ngit push\nfatal: The current branch test-branch has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin test-branch\nYou can re-run the command as given (copy from in Terminal).\nThe incoming contributions from Contributor A and Contributor B these files are now at their fork, and will need a Pull Request to move to the shared repo.\n\nContributor A and Contributor B go to github and look at their own fork (if you’ve forgotten the URL you can use git remote -v and look next to origin. Github knows that the fork now has material that the shared repo doesn’t, and will make a New Pull Request button available.\n\n\n\n\nImage of drop down menu for branches, shows for-pull-request and main\n\n\n\n\n\nCreate PR screen\n\n\nSince we created files with unique file names, these PRs will show up as “Able to be automatically merged”.\n\nThe Maintainer should now refresh their page (so they are looking at upstream) and they will see a number next to the Pull Request tab:\n\n\n\n\nImage showing new Pull Requests available\n\n\nThe Maintainer can accept both pull requests, which will merge files into the main branch on the shared repo.\n\n\n\n\nImage of accepting PR\n\n\n\nNow the contributors need to synchronize with the shared repo. They first have to switch to the main branch, then they can use git pull to bring the new files from the other contributor into their local repo.\n\nContributor A and Contributor B should switch to main, then pull upstream.\n\n\ngit checkout main\ngit pull upstream main\n\n\nFinally, Contributor A and Contributor B will push these new changes from the shared repo up to their forks.\n\n\ngit push\n\nI’ve always thought it is a little strange that a contributor’s fork doesn’t distribute changes from upstream, but that new work from the shared repo gets to the fork via the contributor’s local repo on their laptop. After all, github knows the fork is connected to the shared repo … but this is the roundabout way it works.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Github collaboration</span>"
    ]
  },
  {
    "objectID": "skills/github_collaboration.html#once-more-but-with-maintainer-editing-as-well.",
    "href": "skills/github_collaboration.html#once-more-but-with-maintainer-editing-as-well.",
    "title": "18  Github collaboration",
    "section": "18.4 Once more, but with maintainer editing as well.",
    "text": "18.4 Once more, but with maintainer editing as well.\nIn the exercise above you may have noticed that the maintainer was not editing and contributing files, only ContributorA and ContributorB were.\nThe maintainer is the owner of the shared repository (which we call “upstream”). For this reason they can work directly in that repository, and they don’t need to make their own fork. The maintainer can directly use git clone on the shared repository.\n\n\n\n\n\n\nNote\n\n\n\nFor the maintainer upstream and origin are the same; The Maintainer only has one remote set up.\n\n\nThe maintainer can still create pull requests (and they should do). This places them on an equal footing with other contributors, so everyone else can follow the work and comment on it. Maintainers can make a pull request from a branch in their repository to another branch (usually main/main).\nThis gives us another insight: a Github pull request is from a branch to another branch; it doesn’t matter if those branches are in forked repos or in the same repo.\n\nMaintainer should clone the shared repo\n\ngit clone MAINTAINER_URL\nIf the maintainer then runs:\ngit remote -v\nthey will see:\norigin  MAINTAINER_URL (fetch)\norigin  MAINTAINER_URL (push)\nSo … for the maintainer (the owner of the shared repo) the shared repo on their clone is called origin, but those the maintainers (who are working through a fork) it is called upstream. This can be a little confusing. Remember that when we run git clone git automatically sets up a remote called origin.\n\nMaintainer creates a branch and changes to it:\n\ngit branch new-maintainer-branch\ngit checkout new-maintainer-branch\n\nMaintainer creates and saves a file called ‘maintainer.txt’\n\nYou can do this with the same command that the Contributors used:\necho \"Content for the file\" &gt;&gt; maintainer.txt\n\nMaintainer pushes up to the shared repo. Remember: GitHub email/PAT token as password. See Chapter 17 If you see a message about --set-upstream you will also have to copy that the command in the error message to set up the branch on the remote repo.\n\ngit push\nSince the maintainer is working on a new branch, this creates a new branch on the shared repo on github.\n\nMaintainer views the new branch on github, creating a pull request.\n\nThis pull request is a request (to themselves) to bring the code from the new-maintainer-branch branch to main.\n\nContributorA and ContributorB should find the new PR (on the shared repo) and make comments (e.g., “Hey, looks good”).\nThe Maintainer should merge the branch and close the PR.\nEveryone should update their own local repo (on Rstudio). First, everyone needs to switch to main (because that is where the PRs are merged to).\n\ngit checkout main\nThen obtaining the changes, differs slightly between roles:\n\nContributors (who are working through a fork) will need to get the changes from upstream so they need to pull from upstream main, then push to their forks\n\ngit pull upstream main\ngit push\n\nThe maintainer (who cloned the shared repo) will just need git pull. They don’t need to push because the changes are already in the repo they cloned from.\n\ngit pull",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Github collaboration</span>"
    ]
  },
  {
    "objectID": "skills/github_collaboration.html#generate-merge-conflict",
    "href": "skills/github_collaboration.html#generate-merge-conflict",
    "title": "18  Github collaboration",
    "section": "18.5 Generate merge conflict",
    "text": "18.5 Generate merge conflict\n(If starting here, confirm that your Group of three has the setup in Basic forking workflow setup as the starting point.)\nThe point of this exercise is to intentionally create conflicts in editing, to demonstrate how they show up in Pull Requests.\n\nMaintainer should change to the main branch on their local repo.\n\ngit checkout main\n\nMaintainer should then create, add, commit, and push a file called animals.txt with this content:\n\nlion\ntiger\nleopard\nturtle\n\nContributor A and Contributor B should synchronize to receive this file.\n\n\ngit pull upstream main\n\n\nContributor A and Contributor B should both create and switch to a branch.\n\ngit branch animal-branch-CONTRIBUTOR_NAME\ngit checkout animal-branch-CONTRIBUTOR_NAME\n5, Contributor A and Contributor B should each edit the animals.txt file by adding their name to the first line in the animals.txt (so it reads lion contributorA or lion contributorB). They add, commit, push to their forks.\n\n\n\n\n\n\nNote\n\n\n\nNote that these edits are incompatible, so they will generate a conflict when we try to merge them below.\nThey are incompatible because git can’t automatically merge them. Git works line by line and is quite smart (able to notice the insertion of lines, for example) but some merging of work needs human attention.\n\n\n\nContributor A and Contributor B should then go to github and look at their animal-branch on their forks. They should create a pull request by hitting the ‘New Pull Request’ button. Note that the pull request’s may not say “Able to automatically merge” (but go ahead and create the PR anyway.)\nWith everyone looking at Maintainer’s computer, Maintainer should refresh the github page for the shared repository and will see two pull-requests in the pull-request tab.\n\nThe maintainer should merge contributorA’s branch. This should merge cleanly since contributorA directly edited the lion line that the maintainer wrote.\nHowever, the second pull request will create a merge conflict. So the maintainer will have to resolve the conflict.\n\n\n\nViewing a PR on GitHub that will not merge cleanly, simple fixes can be applied via Resolve Conflicts button highlighted in purple\n\n\n\n18.5.1 Resolving merge conflict\nFor small edits like this, we can edit the file on the github website.\nThe maintainer can choose whatever contributions they want:\n\nthe original line\nthe line from ContributorA\nthe line from ContributorB\nBoth lines\nAny other decision they make\n\nTo show a conflict, git inserts special lines into the file, using these characters: &lt;&lt;&lt;&lt;&lt; ======== and &gt;&gt;&gt;&gt;&gt;&gt; While those are present, git will not let us continue.\n\n\n\n\n\n\nNote\n\n\n\nThis way of showing a comparison between files is called a diff. You can read more about diffs. e.g., A tutorial on diff and diff format\n\n\nTo resolve the conflict we have to remove those lines. As long as they are gone, git will accept whatever is in the file as the new desired state. Git is only working at the syntax level, it does not check the semantics of the file (e.g., whether the code runs, or whether the resulting document is readable or logically consistent.)\nThe maintainer should see the file marked with a conflict like:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nlion contributorA\n=======\nlion contributorB\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; animal-branch-contributorB\ntiger\nleopard\nturtle\nWe can read this as follows:\n\nThe code in HEAD has “contributorA” next to lion. But the code in animal-branch-contributorB has conflicting code for that line, showing “contributorB” next to line.\n\nThe maintainer should go ahead and remove the &lt;&lt;&lt;&lt;&lt; ======== and &gt;&gt;&gt;&gt;&gt;&gt; lines, then save the file.\nTo let git know we are done resolving a conflict we need to then git add and git commit that file. If we are editing on GitHub that is done automatically for us.\n\nEach person should then synchronize their local repos.\n\nFor the Maintainer that just means git pull (since they have a direct clone of upstream).\nFor Contributor B and Contributor A they have to first get the changes in upstream, then push them to their fork.\n\ngit pull upstream main\ngit push",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Github collaboration</span>"
    ]
  },
  {
    "objectID": "skills/github_collaboration.html#deleting-branches",
    "href": "skills/github_collaboration.html#deleting-branches",
    "title": "18  Github collaboration",
    "section": "18.6 Deleting branches",
    "text": "18.6 Deleting branches\nWe have been using branches as temporary working areas, intended to be used, merged, and then deleted. Later we will discuss longer lived branches (such as a staging or dev branch).\nFor short lived branches, though, we usually want to delete them when they are merged. GitHub offers that as an option after a PR is accepted.\nWe can also delete a branch on our local repo, then push that change up to GitHub.\ngit branch -d localBranchName\ngit push\nOr we can do this with a single command:\ngit push origin --delete remoteBranchName\nThe maintainers should go ahead and delete their branches, push to GitHub and make sure that they are gone from the fork. Note that we don’t need to delete the contributor’s branches from upstream because they never went there (the PR asked to bring the changes on the branches directly into the main branch on the shared repo).",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Github collaboration</span>"
    ]
  },
  {
    "objectID": "skills/github_collaboration.html#exercises",
    "href": "skills/github_collaboration.html#exercises",
    "title": "18  Github collaboration",
    "section": "18.7 Exercises",
    "text": "18.7 Exercises\n\nRotate your group, repeating the animals conflict exercise. When you change maintainer you will need to repeat the repository set up (use entirely new repos on GitHub). Use edits to different lines in the animals file.\nExperiment to find out what happens when a contributor adds additional commits to a branch on their fork, after they have opened a PR.\nExperiment to find out what happens if contributors don’t synchronize their local repo after having their PR accepted.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Github collaboration</span>"
    ]
  },
  {
    "objectID": "skills/git_cherrypick_split_pr.html",
    "href": "skills/git_cherrypick_split_pr.html",
    "title": "19  Split a Pull Request",
    "section": "",
    "text": "19.1 Split before submit\nSometimes maintainers like part of the work that a contributor has done, but they don’t like all of it.\nIn this situation, a maintainer might respond to a pull request by asking you to split your contributions into a few different pull requests. This can help keep different contributions separate, smaller, and make them easier to discuss. You might remember the importance of small layers from the week on Coordination and discussion of the Superposition paper in Chapter 7.\nOne common cause of mixing up different pieces of work in one pull request is forgetting to change branches in your repo. If you add additional commits to that branch then they will get added to the pull request. Remember, a pull request says, “Please come to this repo and get everything on this branch.” So it’s not the same as including some commits in a zip file and mailing them, it’s more like placing things into a particular spot (like a mailbox or dead-drop in a spy movie), and telling people to pick them up from there.\nSo you can always add additional things before the person comes to pick them up.\nThis is useful because if there is a conversation around the pull request then you can easily update things. For example, if someone said “Please fix a typo or pull from upstream before we consider your pull request,” you’d be able to do so without opening another PR (just add, commit, push to your branch on your fork and the PR is updated).\nHowever, it is an issue if you accidentally add new commits to a branch before a pull request is accepted. Now your pull request has two sets of commits: the first set you meant to include and the second set you didn’t. This mistake is particularly easy to make if you are developing on the main branch in your fork (which you shouldn’t do), but also happens if you are have more than one contribution that you are working on, as when you are doing something else while waiting for a PR to be accepted. If you’ve accidentally added too many files to your pull request—something that is easy to do if you use git add * or some variant—you’ll also find yourself needing to remove content from your PR.\nThis is where the delightfully named git cherry-pick can help us.\nThings would be better if you had created a new branch for the first set of commits, then a second branch for your second set of commits, never adding either set to your main branch and following the “always work on a (short-lived) feature branch” rule. Then each set of commits would be “sent” through a different pull request.\nIn other words we would be in good position to submit two separate pull requests:\ngitGraph\n  commit id: \"main1\"\n  commit id: \"main2\"\n  commit id: \"branch here\" type: HIGHLIGHT\n  branch first_set\n  commit id: \"apple1\"\n  commit id: \"apple2\"\n  checkout main\n  branch second_set\n  commit id: \"orange1\"\n  commit id: \"orange2\"\nBut instead we have everything mixed up together on one branch.\ngitGraph\n  commit id: \"main1\"\n  commit id: \"main2\"\n  commit id: \"branch here\" type: HIGHLIGHT\n  branch all_mixed_up\n  commit id: \"apple1\"\n  commit id: \"orange1\"\n  commit id: \"apple2\"\n  commit id: \"orange2\"\nWe might have forgotten to branch at all, and so have everything stuck on main\ngitGraph\n  commit id: \"main1\"\n  commit id: \"main2\"\n  commit id: \"branch here\" type: HIGHLIGHT\n  commit id: \"apple1\"\n  commit id: \"orange1\"\n  commit id: \"apple2\"\n  commit id: \"orange2\"",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Split a Pull Request</span>"
    ]
  },
  {
    "objectID": "skills/git_cherrypick_split_pr.html#learngitbranching-exercise",
    "href": "skills/git_cherrypick_split_pr.html#learngitbranching-exercise",
    "title": "19  Split a Pull Request",
    "section": "19.2 LearnGitBranching exercise",
    "text": "19.2 LearnGitBranching exercise\nWe can see an example of the overall workflow for splitting a PR using the LearnGitBranching Visualizer, I have created a level called Split Pull Request",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Split a Pull Request</span>"
    ]
  },
  {
    "objectID": "skills/git_cherrypick_split_pr.html#cherry-pick-via-commandline-git",
    "href": "skills/git_cherrypick_split_pr.html#cherry-pick-via-commandline-git",
    "title": "19  Split a Pull Request",
    "section": "19.3 Cherry-pick via commandline git",
    "text": "19.3 Cherry-pick via commandline git\nYou can see a situation like this in this repo on GitHub. Bring that to your working space with:\ncd ~\ngit clone https://github.com/jameshowison/i320d-needs-split.git\ncd i320d-needs-split\nIf you then run our git viz command (see Section A.3 for how to set up a short cut for that)\nYou will see both our apple and orange edits all together on the main branch.\njlh5498@educcomp04:~/github_repos/i320d-needs-split$ git viz\n* c70df5a (HEAD -&gt; main) orange2\n* 423ad05 apple2\n* 4f1fe99 orange1\n* 91abdfb apple1\n* 8e35b12 branch here\n* ea4d580 main1\n* 252ff3f Initial commit\nWe eventually want this to look like our first graph above, with two new branches (apple_branch and orange_branch):\njlh5498@educcomp04:~/github_repos/i320d-needs-split$ git viz\n* 09d5482 (HEAD -&gt; orange_branch) orange2\n* 2137500 orange1\n| * c8fd64d (apple_branch) apple2\n| * 1a5ac49 apple1\n|/  \n* 158f2c4 (main) branch here\n* 96d65c3 main2\n* 7036c11 main 1\n* 252ff3f Initial commit\nTo get there we will take three steps:\n\nCreate a new branch, specifying the starting point\nMove the relevant commits to the new branch\nPush to the fork, create a new pull request\n\ngit checkout -b apple_branch 8e35b12\nThe 8e35b12 here is the commit id of the point at which we want the branch to start. Until now when we’ve created a branch we have done so while sitting at HEAD but git allows us to create a branch back in time. Git does this by adding metadata to the earlier commit (labeling it with a branch label).\nThen we can move the commits using git cherry-pick. Note that this doesn’t move them from the main branch, but creates new commits with the same content. This is very much like copying files from one directory into another directory (except we are moving commits from a branch to another branch).\ngit cherry-pick 91abdfb 423ad05\nAgain the strings 91abdfb and 423ad05 identify specific commits. We can provide a list (like above), just one, and it is also possible to provide a range if you want a full sequence of commits.\nAfter the cherry-pick we see:\njlh5498@educcomp04:~/github_repos/i320d-needs-split$ git cherry-pick 91abdfb 423ad05\n[apple_branch 9ca623a] apple1\n Date: Wed Mar 1 15:31:38 2023 -0600\n 1 file changed, 1 insertion(+)\n[apple_branch 2b82f41] apple2\n Date: Wed Mar 1 15:31:38 2023 -0600\n 1 file changed, 1 insertion(+)\njlh5498@educcomp04:~/github_repos/i320d-needs-split$ git viz\n* 2b82f41 (HEAD -&gt; apple_branch) apple2\n* 9ca623a apple1\n| * c70df5a (origin/main, origin/HEAD, main) orange2\n| * 423ad05 apple2\n| * 4f1fe99 orange1\n| * 91abdfb apple1\n|/  \n* 8e35b12 branch here\n* ea4d580 main1\n* 252ff3f Initial commit\nWe can then use git push as normal to push the apple_branch up to the fork and make a pull request.\n\n\n\n\n\n\nNote\n\n\n\nMoving around commits using cherry-pick shows us why it is so important to understand commits as full copies of the state of the working directory, as full snapshots of our files. If commits were just the changes (just a bunch of diffs) then we would have to apply them in the order they were created, otherwise we’d get nonsense results.\nBut because commits are full copies of everything, we can move them around without any logical problems. Think of reordering the trays with the paper planes we used in the first class.\nIn fact, all that git is doing is re-writing the parent for each commit.\nAnd branches are just like little post-its added to some commits, they are just metadata pointers. Neat, isn’t it?\nSee more about this on the GitHub blog https://github.blog/2020-12-17-commits-are-snapshots-not-diffs/",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Split a Pull Request</span>"
    ]
  },
  {
    "objectID": "skills/git_cherrypick_split_pr.html#exercises",
    "href": "skills/git_cherrypick_split_pr.html#exercises",
    "title": "19  Split a Pull Request",
    "section": "19.4 Exercises",
    "text": "19.4 Exercises\n\n19.4.1 Individual Exercises\n\nNow you work to get the orange_branch organized.\n\n\n\n19.4.2 Group Exercises (and homework)\nGroups of 3. Nominate Maintainer, Contributor A, and Contributor B.\n\n19.4.2.1 First round exercise\n\nMaintainer creates a repo on Github.\nMaintainer adds 2 commits and pushes.\nContributor A and Contributor B fork and clone (and add upstream).\nContributor A and Contributor B create a feature branch called will_need_split.\nContributor A and Contributor B add four commits of four files on will_need_split\nContributor A and Contributor B create a pull request to upstream from their will_need_split branch (including all four commits).\nMaintainer rejects the pull request, closing it and commenting “please split this up” and direct which files go together, probably 2 in each PR. That direction creates the instructions for the contributors next step.\nContributor A and Contributor B follow procedure above to end up with two new branches split_branch_1 and split_branch_2 send through separate pull requests with only the right commits/files in them.\nMaintainer eventually accepts/merges each of the four split up pull requests.\n\nIn the end the Upstream repo will show 6 closed PRs (3 from ContributorA and 3 from ContributorB). Two will be closed without merging, and 4 will be merged and closed.\n\n\n19.4.2.2 Second round exercise\nNow ContributorA and Maintainer swap roles and repeat the exercise (this requires new repos and setup)",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Split a Pull Request</span>"
    ]
  },
  {
    "objectID": "skills/git_rebase.html",
    "href": "skills/git_rebase.html",
    "title": "20  Rebase for synchronizing work",
    "section": "",
    "text": "20.1 Adding squash\nThat is also a common request from maintainers, and one that can cause confusion for new contributors.\nWhen one is working on a problem, others may be working in parallel. And their parallel work may be finished before one’s own work is. Thus the starting point for one person’s work (branching point) can “go stale” making it harder to integrate.\nWhile git merge and resolving syntax level conflicts can resolve some of this, it is often easier to understand and review work if it is presented as changes against an updated starting point.\nAs a concrete example imagine a project to build a dashboard.\nImagine that you fork the repo in January to implement a new type of visualization (let’s say a pie chart). You work on this during January and February, finally nailing it down at the start of March. Meanwhile, though, others in the project have spent February introducing a whole new way of accessing databases.\nBy the time you make a pull request at the start of March things have changed a lot since you branched in January.\nIf you submit a PR without updating, the maintainers will likely ask you to update your branch to make it work with the new database system.\nFirst thing to do is to update your local repository with the changes from upstream.\nThen you could try two options:\nOption 1 is possible, but often merging your work involves touching parts of the system you don’t know what much about and is better left to the core developers. In addition, merging in this way leaves merge commit messages and some projects really don’t like those because they make the history harder to read. It also leaves all of your “intermediate” commits in the history (things like “fix typo” and “forgot comma”). Some find that too much information.\nOption 2 is generally preferred, since it focuses on clear communication via PRs that are easier to read and review. Often this just means a single commit showing the differences between the most updated work and the work that you want to contribute. For those viewing the history, it will be just the same as if pie_chart_branch was created in late February and you did all the work very quickly!\nOption 2 is called rebase. We specify a new starting point, and git gives us a little UI in which we can choose which commits to include, which to “squash”, and we can even reorder commits.\nWe have an example set up. First we will clone it, change directory into the repo, and then switch to the pie_chart_branch.\nThen, to make git happy, be sure to set your user and email (this happens because DataCamp resets these variables from session to session):\nOur git viz command (See Section A.3 to set up) shows us the situation:\nWe have two branches (main and pie_chart_branch). pie_chart_branch branched off from main at “second commit”, and since then more work has been added to main (the database related commits). We also have three separate commits for pie_chart_branch.\nSo, in a prettier diagram, the situation looks like this:\nBut we want it to look as though pie_chart_branch came off the tip of main, like this:\nTo accomplish this we can use a git command called rebase. We say that we will “rebase” the pie_chart_branch against main.\nThis puts us into a textual UI, with guidance at the bottom. We can use the arrow keys to move around. In this UI we are editing a text file (so we are using the Nano editor). Each line is a commit, the lines are instructions and are executed in order.\nWe use Ctrl + O to save (aka “write-Out”) and Ctrl+X to exit the editor. We should see a count of commits being rebased and then a message about a successful rebase. Using git viz will then show us:\nThis is a little hard to read. This is because the origin/ branches are shwoing (and those are up on the GitHub server and not yet changed). Look closely at the pie_chart_branch and down the left column. We now see that pie chart 1 commit comes directly after the two commits on main, just as though the work started there.\nTo get this to also be reflected on the server we would have to do a “force push” git push -f which makes the server reflect the local repo. Note that this is usual for rebase on branches, but one should be very hesitant with any force operations on main or a branch shared with others. (Since you are not the owners of the repo, you won’t be able to do a force push here). After the force push, things are neater:\nYou might be thinking, didn’t we do pretty much the same thing with cherrypick? And yes, in this situation rebase is very similar to cherrypick.\nRebase does offer some additional opportunities though. Notice that the textual UI shows more options than just ‘pick’. One otion is ‘squash’ which takes changes from multiple commits and presents them in a single commit. This can make a git history easier for teammates to understand.\nWe want to squash those three commits down to one commit, and (like before) we want that commit to represent changes as though we had branched off main after the database 2 commit. First, remove the directory we have been working in and reset things with a new clone.\nJust as before we use:\nThis puts us back into a textual UI, with guidance at the bottom. This time instead of leaving all three as ‘pick’ we change two of them to squash. We do this by editing the file so that two of the lines show s instead of pick.\nAfter we use Ctrl + O to save (aka “write-Out”) and Ctrl+X to exit the editor, git completes the squash by including all the changes in a single commit. We are then returned to the editor to create a new commit message.\nFinally, we can use git viz to see the new situation.\nIgnore the remote branch (origin/pie_chart_branch), and focus only on the local branch (HEAD -&gt; pie_chart_branch). Instead of all three commits, we now only see a single commit (c367b8a).\nNote that in these examples we did not encounter any conflicts (because edits were all on different files). In reality, though, when commits are moved around, rebased, and squashed, sometimes those operations result in conflicts (just as happens with merge). In that case git add the conflict symbols (&lt;&lt;&lt;&lt;&lt;&lt; and ========== and &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;) which all need to be removed, then the files added and finally we run git rebase --continue. Git does provide useful messages through that process with guidance on the likely next steps.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Rebase for synchronizing work</span>"
    ]
  },
  {
    "objectID": "skills/git_rebase.html#adding-squash",
    "href": "skills/git_rebase.html#adding-squash",
    "title": "20  Rebase for synchronizing work",
    "section": "",
    "text": "cd ..\nrm -rf 320d_rebase_example\ngit clone https://github.com/jameshowison/320d_rebase_example.git\ncd 320d_rebase_example\ngit switch pie_chart_branch\n\ngit rebase -i main\n\n\n\n\n\n* 32f895e (HEAD -&gt; pie_chart_branch) Here I have tidied up the history to make it easier to read. Pie chart draws pies.\n* 2b6a2cf (origin/main, origin/HEAD, main) database 2\n* 70c14e7 database 1\n| * 246e49e (origin/pie_chart_branch) pie chart 3\n| * 4c12962 pie chart 2\n| * 123593a pie chart 1\n|/  \n* ccd6067 second commit\n* 512525e first commit\n* 20b7fb5 Initial commit",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Rebase for synchronizing work</span>"
    ]
  },
  {
    "objectID": "skills/git_rebase.html#rebase-exercise",
    "href": "skills/git_rebase.html#rebase-exercise",
    "title": "20  Rebase for synchronizing work",
    "section": "20.2 Rebase Exercise",
    "text": "20.2 Rebase Exercise\nIn groups of three, a Maintainer and two contributors, begin by setting up the collaboration network (a new repo, forks, clones and setting upstream). Then work together to implement these steps:\n\nMaintainer makes two commits to the main branch, contributors use git pull upstream main to synchronize.\nEach contributor creates a feature branch, and adds two commits to a file with their name.\nContributors create PRs that the Maintainer sees on the upstream/shared repository.\nMaintainer can accept one, merging to main.\nMaintainer then asks the other contributor to rebase their contribution.\nThe contributor doing the rebase first does a git pull upstream main to get the new work onto the main branch in their local git.\nThen the contributor uses rebase and squash (as above) and uses git push -f to get their fork synchronized with their rebase.\nMaintainer should then check the PR and they will find only a single commit (the two previous ones squashed together), now looking as though it branched off main after the first contributor’s work. Maintainer can then accept the rebased PR.\nBoth contributors should synchronize (git pull upstream main and then git push to sync their forks.)",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Rebase for synchronizing work</span>"
    ]
  },
  {
    "objectID": "skills/tests.html",
    "href": "skills/tests.html",
    "title": "21  Testing",
    "section": "",
    "text": "21.1 Needed programming concepts\nTest suites allow a programming group to define expected behaviors and verify them using software tests. Then, when changes are introduced to the codebase, the test suite can show that the changes have not accidentally altered the expected behaviors.\nThey help with the challenge of coordination among developers as codebases change, serving as an executable reminder of developers intentions.\nIn this class we will get some experience with writing and executing multiple tests (making a “test suite”). We will get to the point where individual contributors can run the tests prior to making a PR, serving as an individual level check. In the class on Continuous Integration we will learn how to use Github Actions so that these tests are automatically run when a PR is created, and have GitHub report the results.\nA software test consists of:\nWe will be using the python pytest library.\nIn order to understand how tests work in pytest we need to know a few programming concepts: functions, parameters, and exceptions.\nA function is a reuseable chunk of code. A function is defined by providing a name and then providing the chunk of code. We can then use the chunk of code by calling the name from other code.\nA parameter is an object that the function receives, it is usually a piece of data like a piece of text or a number.\nThe return value of a function is the output that is returned. When a function is called from other code, we can replace the function with its return value to help understand what will happen in the code.\nFor example, imagine we are working with phone numbers. We want to re-format phone numbers to make them readable. For example, if we were given 5125555678 we would want to reformat that to show (512) 555 5678\nThe variable phone_num_to_fix is the parameter, the function name is fix_phone_num, and the return value will be the contents of the variable fixed_num (which are the parts stiched back together).\nWe can manually test our function in a notebook using two cells. The first cell has the code above to define the function, and the second cell has code to run the function. We can then inspect what it returns.\nIf we run this code in a cell in a notebook, we will see the result is\nThe starting/ending single quote marks ('   ') are python’s way of telling us that this is a string. Manually we look inside that and see that yes, our code is properly formatted.\npytest allows us to automate this process.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "skills/tests.html#needed-programming-concepts",
    "href": "skills/tests.html#needed-programming-concepts",
    "title": "21  Testing",
    "section": "",
    "text": "def fix_phone_num(phone_num_to_fix):\n  # given \"5125558823\". Split the parts, then recombine and return\n  area_code = phone_num_to_fix[0:3] # 512 (first three digits)\n  three_part = phone_num_to_fix[3:6] # 555 (next three digits)\n  four_part = phone_num_to_fix[6:] # # 8823 (last four digits)\n  \n  fixed_num = \"(\" + area_code + \")\" + \" \" + three_part + \" \" + four_part \n  \n  return fixed_num\n\n\nbad_num = \"5125558823\"\n\nfix_phone_num(bad_num)\n\n'(512) 555 8823'",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "skills/tests.html#automating",
    "href": "skills/tests.html#automating",
    "title": "21  Testing",
    "section": "21.2 Automating",
    "text": "21.2 Automating\nTo automate this idea we will use pytest. pytest looks through a python file and runs all functions that start with test_.\nTo define a test for pytest we need one additional concept: assert. An assertion is a statement that checks if a piece of code returns True or False. If assert sees True then the test has passed. If it sees False then the test has failed. We can use it to check whether our function (given a particular input) gives us our expected output.\nSo now we have our function above and one additional function (the test) which has an assert within it.\nimport pytest\n\ndef test_fix_phone_num():\n  assert fix_phone_num(\"5125558823\") == '(512) 555 8823'\nThe assert line here receives an equality test ==. If the two sides are the same, then it returns True. So to work this through python will execute:\nassert fix_phone_num(\"5125558823\") == '(512) 555 8823'\nthen the call to fix_phone_num(““5125558823”) will make python move into the function. The string parts will be split up, then recombined, and finally the call to return will bring us back to the assert line, the call to the function will be replaced by the return value and so python will see:\nassert '(512) 555 8823' == '(512) 555 8823'\nPython will compare the left and right sides, which are the same. That comparison will return True, so python will see:\nassert True\nWhen pytest runs this code sees assert True it understands that that part of the test has passed.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "skills/tests.html#running-pytest",
    "href": "skills/tests.html#running-pytest",
    "title": "21  Testing",
    "section": "21.3 Running pytest",
    "text": "21.3 Running pytest\npytest is run from the commandline. We pass it the name of a source file (my_code.py), it finds all the functions that start with test_ and runs them. In our example if the assert line sees True then the test passes.\nWe can have more than one assert within a test, but only if all of them pass does the whole test pass.\nTo run from the command line we need to move to Terminal (“Run” → “Terminal” on DataCamp).\nFirst go to this example repo on GitHub, and make your own fork. Then clone that fork down and change into that directory.\ngit clone &lt;your_fork_url&gt;\ncd i320d-pytest-example/\nNow we have our function and our test. You can quickly glance at a file on the commandline using\ncat my_code.py\nThen we can run tests using\n$ pytest -v my_code.py\nThe -v makes the output verbose which I think is helpful because it shows all the tests that ran by name.\nThe output looks like\n=========================== test session starts ============================\nplatform linux -- Python 3.8.10, pytest-7.1.2, pluggy-1.0.0 -- /usr/bin/python3\ncachedir: .pytest_cache\nrootdir: /work/files/workspace/i320d-pytest-example\nplugins: dash-2.13.0, web3-5.31.0, anyio-3.6.1\ncollected 1 item                                                           \n\nmy_code.py::test_fix_phone_num PASSED                                [100%]\n\n============================ 1 passed in 0.03s =============================\n\n\n\n\n\n\nPrelude to Continuous Integration\n\n\n\n\n\nIn the next class we will get GitHub to run these tests for us. Essentially that means that when we set up a PR we will ask GitHub to:\n\nSet up a virtual machine\nCheck out the codebase as though the PR had been applied to main\nInstall any needed dependencies\nRun the pytest command\nReport back on the results, specifically show whether all tests passed, and if they didn’t tell us which ones did not pass.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "skills/tests.html#dealing-with-bad-input",
    "href": "skills/tests.html#dealing-with-bad-input",
    "title": "21  Testing",
    "section": "21.4 Dealing with bad input",
    "text": "21.4 Dealing with bad input\nOne very common kind of bug is when the code can’t handle unexpected input. For example, what happens if our function hits input like 'mobile' (which is not a phone). This is very useful for coordination since future developers might not understand what we assumed would be passed to a function. So we can use tests to see if our function will behave in the appropriate way.\nIn programming we can indicate that we’ve received something we weren’t expecting and can’t handle is to raise an Error. This will enable us to communicate effectively with future programmers. When we define our own error we can better describe the issue, avoiding just letting code fail. If we don’t throw a specific error, Python will end up throwing an obscure exception somewhere deep down the stack, or returning invalid output (but blithely keep going).\nFor example, if we pass our function a phone number that is too short, what will currently happen? Run this in a cell in a notebook.\nshort_num = \"51\"\n\nfix_phone_num(\"51\")\nPython will return `‘(51)’. That is not a valid phone number. (If you are wondering why it doesn’t throw an error, I was too, apparently string slicing doesn’t throw errors, even when the index passed is too high).\nWhat should our function do if it encounters something that it can’t turn into a valid phone number? The answer is that it should raise an Error. And we should throw the most specific kind of Error. Here that is going to be a ValueError\nThis brings us to another idea in testing: we should write the test first, see that it fails, then write the code. This feels a little backwards, but the idea is that helps quality. The idea is called Test Driven Development\nHere we can test whether code raises an Error using the pytest.raises function which we can use to check that, given a known bad input, our function will give us a helpful error.\ndef test_fix_phone_num():\n  assert fix_phone_num(\"5125558823\") == '(512) 555 8823'\n  \n  # Now check that a too short string gives a ValueError\n  with pytest.raises(ValueError):\n    fix_phone_num(\"51\")\nNow if we run our test, we will see it fail:\n========================= test session starts =========================\nplatform linux -- Python 3.8.10, pytest-7.1.2, pluggy-1.0.0 -- /usr/bin/python3\ncachedir: .pytest_cache\nrootdir: /work/files/workspace/i320d-pytest-example\nplugins: dash-2.13.0, web3-5.31.0, anyio-3.6.1\ncollected 1 item                                                      \n\nmy_code.py::test_fix_phone_num FAILED                           [100%]\n\n============================== FAILURES ===============================\n_________________________ test_fix_phone_num __________________________\n\n    def test_fix_phone_num():\n      assert fix_phone_num(\"5125558823\") == '(512) 555 8823'\n    \n      # Now check that a too short string gives a ValueError\n      with pytest.raises(ValueError):\n&gt;       fix_phone_num(\"51\")\nE       Failed: DID NOT RAISE &lt;class 'ValueError'&gt;\n\nmy_code.py:18: Failed\n======================= short test summary info =======================\nFAILED my_code.py::test_fix_phone_num - Failed: DID NOT RAISE &lt;class...\n========================== 1 failed in 0.17s ==========================\nSo now we know what we need to do. This is called “sanity checking” inputs. We can add an if statement to know whether to raise an error.\ndef fix_phone_num(phone_num_to_fix):\n  # can only handle numbers that are exactly 10 digits long\n  if (len(phone_num_to_fix) != 10):\n    raise ValueError(\"Can only format numbers that are exactly 10 digits long\")\n  \n  ...\nNow instead of invalid output, we get an Error with a specific message and we get guidance of where the problem is. If we run that code manually in a notebook we see:\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[30], line 3\n      1 short_num = \"51\"\n----&gt; 3 fix_phone_num(\"51\")\n\nCell In[29], line 4, in fix_phone_num(phone_num_to_fix)\n      1 def fix_phone_num(phone_num_to_fix):\n      2   # can only handle numbers that are exactly 10 digits long\n      3   if (len(phone_num_to_fix) != 10):\n----&gt; 4     raise ValueError(\"Can only format numbers that are exactly 10 digits long\")\n      6   # given \"5125558823\". Split the parts, then recombine and return\n      7   area_code = phone_num_to_fix[0:2] # 512 (first three digits)\n\nValueError: Can only format numbers that are exactly 10 digits long\nAnd if we run pytest on the commandline, we will see that the test passes (because calling with “51” does indeed throw the expected ValueError).\n$ pytest -v my_code_error.py \n============================ test session starts ============================\nplatform linux -- Python 3.8.10, pytest-7.1.2, pluggy-1.0.0 -- /usr/bin/python3\ncachedir: .pytest_cache\nrootdir: /work/files/workspace/i320d-pytest-example\nplugins: dash-2.13.0, web3-5.31.0, anyio-3.6.1\ncollected 1 item                                                            \n\nmy_code_error.py::test_fix_phone_num PASSED                           [100%]\n\n============================= 1 passed in 0.05s =============================\nIf you are wondering why it only says “1 passed” that is because pytest only counts the number of functions (beginning with test_). It doesn’t count the number of assertions. If you’d prefer to see these two checks as different tests, then you have to create a new test_ method (e.g., test_value_error_on_wrong_length).",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "skills/tests.html#exercises",
    "href": "skills/tests.html#exercises",
    "title": "21  Testing",
    "section": "21.5 Exercises",
    "text": "21.5 Exercises\nUse your fork of the i320d-pytest-example repo and clone it to your workspace. To edit the files you can either use ‘nano’ or you can edit them on GitHub (look for the pen button when viewing a file), remembering to use git pull to bring your edits down to your clone.\n\nAdd an additional assertion to the test_fix_phone_num function that tests these inputs: 5554429876 and 3216543333.\nAdd a test (meaning a whole separate function starting with test_, not just additional asserts) that specifies that the function should be able to handle these inputs: 555-442-98761 and (321) 654 3333. Give your test a communicative name. These tests will fail at the moment.\nShift the ValueError assertion into its own test\nImplement a test that checks that a ValueError is raised if the input is not all digits. (Hint: you can use the .isdigit() method on a string)",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "skills/tests.html#additional-resources",
    "href": "skills/tests.html#additional-resources",
    "title": "21  Testing",
    "section": "21.6 Additional resources",
    "text": "21.6 Additional resources\n[Pytest Awesome Project}(https://github.com/augustogoulart/awesome-pytest): a curated list of pytest resources (including training courses).",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "skills/continuous_integration.html",
    "href": "skills/continuous_integration.html",
    "title": "22  Continuous Integration (aka CI/CD)",
    "section": "",
    "text": "22.1 Automating tests\nContinuous Integration encourages frequent merging of developing code, running the test suite to ensure that nothing is merged to main unless all the tests pass.\nContinuous integration helps a project to stay synchronized, achieving coordination by managing dependencies between activities. Some of the sources of change that can cause issues for projects are:\nProjects accomplish Continuous Integration by:\nIn this class we will focus on automatically running test suites. In Chapter 21 we introduced a test framework called pytest. Recall that we created new functions whose name begins with test_ and includes assert statements that run code and compare actual output with expected output. When they don’t match, the test fails. Here is our example of a test:\nTo achieve continuous integration, we want to be sure that all of these tests are run automatically before any code is merged. When we merge, git and GitHub can tell us if the merge would case any syntax issues (whether the code merges cleanly at a typing level), but only a test suite can tell us if code will merge cleanly at a semantic level (if the resulting code will perform as we expect).\nTo run these tests we need to undertake these steps:\nThese steps can be undertaken by quite a few different systems. We will learn using GitHub Actions, but see Section 22.3 for alternatives.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Continuous Integration (aka CI/CD)</span>"
    ]
  },
  {
    "objectID": "skills/continuous_integration.html#automating-tests",
    "href": "skills/continuous_integration.html#automating-tests",
    "title": "22  Continuous Integration (aka CI/CD)",
    "section": "",
    "text": "Establish a computing environment in which the code can run.\nInstall the code from the project as though the PR had been accepted (see FAQ: Section A.5)\nInstall any dependencies that the project needs\nRun the needed test command (here that will be pytest my_code.py)\nGather the results, and display them alongside the PR.\n\n\n\n22.1.1 Github Actions\nGithub Actions is a GitHub feature that enables automation in repositories, including continuous integration.\nTo establish an automation we have to add a file to the repository, in the .GitHub/workflows directory. This file tells GitHub Actions what to do when particular events occur.\nname: Run pytest tests\n\non: \n  pull_request:\n    branches: [ main ]\nThe first part of the file (shown above) provides a name for the workflow (Run pytest tests) and establishes a trigger for the workflow to be run. Here we specify that we want this workflow to run whenever there is a pull_request to the main branch (thus covering the usual situation for PRs).\nThen next parts of the file layout the abstract steps as shown above:\nFirst we establish the operating system for the test runner virtual machine. Here we say that we want to use ubuntu-latest (which is a flavor of unix).\njobs:\n  build:\n    runs-on: ubuntu-latest\nThen we specify that we want to checkout the code for the PR. Github Actions allows us to refer to chunks of code defined by GitHub. This is just like using a function from a library (where the uses command gives the name of the function and the with block provides parameters)\n    steps:\n    - uses: actions/checkout@v4\nThen we actually install the needed version of python.\n    - uses: actions/setup-python@v4\n      with:\n        python-version: '3.10' \nThen we install any needed dependencies (here we just check that pytest is installed)\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install pytest\nFinally we reuse a community contributed piece of code called pytest-summary and give it the parameter my_code.py so that we know which file pytest will run against (see documentation of pytest-summary here). pytest-summary both runs the tests and provides a template so that GitHub can pretty print the test results.\n    - name: Pytest summary\n      uses: dariocurr/pytest-summary@v2\n      with:\n        paths: my_code.py\nTogether, then the file looks like:\nname: Run pytest tests\n\non: \n  pull_request:\n    branches: \n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-python@v5\n      with:\n        python-version: '3.10' \n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install pytest\n    - name: Pytest summary\n      uses: dariocurr/pytest-summary@v2\n      with:\n        paths: my_code.py\nThe easiest way to create GitHub Actions files is using the “Actions” tab and then the “New Action”. Github shows a “marketplace” of community (and commercially) contributed workflows, but you can provide your own file by hitting the “set up a workflow yourself” button.\n\n\n\nscreenshot showing selection “Actions” tab and New Action button\n\n\nOnce that full file into our repo in the special .github/workflows/pytest.yml location, then GitHub will see the file and add this new check to a new PR when it is opened.\n\n\n\nscreenshot showing merge checks including new job for pytest action\n\n\nIf you click on the “Details” link you move over to the Actions tab and, once the test run is complete (time seems to vary, usually it is very fast), you will see the Summary details (generated by the pytest-summary package).\n\n\n\nSummary details showing a failing test\n\n\nIf you delve deeper into the “build” section you can see the full logfile of the action run. At the top we can see that the virtual machine is set up with the operating system we specified.\n\n\n\nScreenshot of the action log showing that ubuntu was used to set up the virtual machine\n\n\nAnd further down we can see the output of pytest my_code.py just as we would have seen it run on the commandline.\n\n\n\nScreenshot of the output of pytest my_code.py just as we would have seen it run on the commandline.\n\n\nThat output is gathered by the pytest-summary package and used to create the visual summary displayed above.\nThe PR page itself will now show that a check has failed (or it might still show the check in progress).\n\n\n\nScreenshot of checks section showing tests failed\n\n\nTo fix the failing test, you need to edit the files to either remove the new test or make it pass, add, commit, and push that new commit into the branch for the PR. This will cause the tests to run again, and (if all tests now pass) you will see:\n\n\n\nScreenshot showing that all checks have passed, reflecting situation after the failing test is fixed\n\n\nOne further step would be to add a code coverage test. These are a “test that there are tests” approach, which watches for changes in the proportion of lines that actually executive when tests are run. pytest can do code coverage (using the pytest-coverage plugin) but there are also lots of additional tools and external services (some of which check for additional code quality measures as well). Here as an example (from the commercial service CodeClimate).\n\n\n\nChecks provided by CodeClimate service, showing coverage thresholds",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Continuous Integration (aka CI/CD)</span>"
    ]
  },
  {
    "objectID": "skills/continuous_integration.html#exercise",
    "href": "skills/continuous_integration.html#exercise",
    "title": "22  Continuous Integration (aka CI/CD)",
    "section": "22.2 Exercise:",
    "text": "22.2 Exercise:\n\nAdd an action to your repo, using the code in this file.\nCreate a PR for an edit to my_code.py that creates a failing test. Remember to use a new branch.\nObserve the test running, and locate the test failure report.\nPush a fix that makes your new test pass.\nObserve the test running again, and your PR should now show “all Checks Passed”",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Continuous Integration (aka CI/CD)</span>"
    ]
  },
  {
    "objectID": "skills/continuous_integration.html#sec-alt-ci",
    "href": "skills/continuous_integration.html#sec-alt-ci",
    "title": "22  Continuous Integration (aka CI/CD)",
    "section": "22.3 Alternatives to GitHub actions",
    "text": "22.3 Alternatives to GitHub actions\nIt is possible to “roll your own” using a cloud provider like Google Cloud or AWS, but there are service providers ready to help. For example, TravisCI or CircleCI are well known continuous integration providers. Each provides cloud computing environments which can startup, install software, run tests, and provide reports. Since running any computation (including just installing things) costs real money, these services typically charge money, but often will provide a free account with reasonable usage limits for open source projects https://circleci.com/open-source/. Yet as with anything that is provided for free (including Github Actions) changes in corporate ownership can upend things",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Continuous Integration (aka CI/CD)</span>"
    ]
  },
  {
    "objectID": "skills/packaging.html",
    "href": "skills/packaging.html",
    "title": "23  Packages to distribute code",
    "section": "",
    "text": "23.1 What is needed for package management?\nPackages are ways of distributing software. We discussed packages in the material on Stack, Streak and Ecosystem: Chapter 11\nPackages enable us to build on the work of others, when we install packages and import them into our code.\nBut eventually we will have code that we want to distribute to others, whether that be classmates or others within our organization, or perhaps the world at large.\nThere are a few ways that we can distribute code, all with pros and cons.\nCopy and paste. We can send code to others by simply copying and pasting, then sending perhaps by Slack or even through email. A slightly more advanced approach is to use a gist or pastebin such as https://gist.github.com/ or http://pastebin.com. Copy and pasting is quick but it is limited. We then have no way of updating the code, or of knowing where it is used.\nWe can, of course, share code via GitHub or GitLab. Here we can publish a repository, either publicly or within our Organization, and give people the URL. Then people can clone the code into their individual workspaces. At least then the potential user can re-visit for updates and our user would know where they could contact people for issues or even to share improvements.\nBut GitHub on its own does not offer much to manage the complexities of developing software and keeping things up to date over time. For that we must turn to packaging and to package distribution systems which provides the python packages that can be installed by pip. These offer much greater effectiveness: the package publisher can provide updates, bugfixes or improvements, and the user can get informed about when updates are available and have them automatically downloaded.\nPackages and package management offer a few other important advantages:\nPackaging can be thought about in four steps:\nDifferent languages and software ecosystems implement these steps themselves.\nIn Python, for examples, Encapsulation is done with directories, which have files inside with the code (“regular” some_code_name.py files. Metadata is done with additional files inside the directories. The tool pip handles both installation and dependency resolution. For the server that hosts the packages there is one broad public server called PyPI (which stands for the PYthon Package Index), but it is also possible for individual organizations to run a version “behind the firewall” to manage packages within their organization.\nIn R, encapsulation is also done through directories, metadata through files. Package installation is done within the R base software. In R there are a few important central repositories, including CRAN (Comprehensive R Archive Network) and Bioconductor (a separate package manager focused on biology packages, an example of convergent evolution). There are lots of different mirrors for CRAN.\nPackage management “behind the firewall” is so important to firms, that the company that builds Rstudio now offers package management for both R and Python https://packagemanager.posit.co/client/#/ both publically and within companies. Similarly Anaconda a company based in Austin offers package management across an eve wider set of languages.",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Packages to distribute code</span>"
    ]
  },
  {
    "objectID": "skills/packaging.html#what-is-needed-for-package-management",
    "href": "skills/packaging.html#what-is-needed-for-package-management",
    "title": "23  Packages to distribute code",
    "section": "",
    "text": "Encapsulating code in a chunk that can be moved around\nMetadata that describes the package, including authorship, licensing and, crucially, dependencies.\nAn installation tool that can bring packages from the server into local environments, and check and manage dependencies.\nA server location to which packages can be published",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Packages to distribute code</span>"
    ]
  },
  {
    "objectID": "skills/packaging.html#from-code-to-published-package-in-python",
    "href": "skills/packaging.html#from-code-to-published-package-in-python",
    "title": "23  Packages to distribute code",
    "section": "23.2 From code to published package in Python",
    "text": "23.2 From code to published package in Python\nFor these materials we will work through a Data Camp course (which you are welcome to finish), called Developing Python Packages.\nThe course shows how to take code and wrap it in a directory with special files, then how to publish it to PyPI (using a special repository just for testing).",
    "crumbs": [
      "Skills",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Packages to distribute code</span>"
    ]
  },
  {
    "objectID": "skills/skills_faq.html",
    "href": "skills/skills_faq.html",
    "title": "Appendix A — Skills faq",
    "section": "",
    "text": "A.1 git issues",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Skills faq</span>"
    ]
  },
  {
    "objectID": "skills/skills_faq.html#git-issues",
    "href": "skills/skills_faq.html#git-issues",
    "title": "Appendix A — Skills faq",
    "section": "",
    "text": "A.1.1 Set my name and email\ngit wants to add your name and email to commits. These are distinct from your github account (remember git can be used independently of an online service or with online services other than github).\nIf you are seeing messages that end like this:\nYou can suppress this message by setting them explicitly. Run the\nfollowing command and follow the instructions in your editor to edit\nyour configuration file:\n\n    git config --global --edit\n\nAfter doing this, you may fix the identity used for this commit with:\n\n    git commit --amend --reset-author\nThen you can run these commands to set a username and email. Note that these can be anything, they aren’t a login or checked against anything, they are just metadata attached to your commits. Nonetheless having them make sense for your identity makes sense when sharing code publically. They can easily be a made up identifier (pseudonym/handle/accountname).\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n\n\nA.1.2 Login to GitHub\nOn the commandline we have to use the username/PAT combination. The password that works to log into GitHub on the web will not work.\nIf you see this message:\nremote: No anonymous write access.\nfatal: Authentication failed for &lt;repo_url&gt;\nThen you need to log in, but first reset the credential cache:\ngit config --global credential.helper 'cache --timeout=10000000'\nThen repeat the command that failed (hit the up-arrow twice usually brings it up).\nWhen you see this prompt, use your GitHub username (not the email address)\nUsername for 'https://github.com': &lt;your_github_username&gt; \nWhen you see this prompt, even though it says “password” you must use your PAT token:\nPassword for 'https://&lt;your_github_username&gt;@github.com': \nOn windows you may have to use the right-click context menu to paste into the terminal.\n\n\nA.1.3 Password pop-up repeats too often\nThe username/password pop-up can come up too often. Especially with GitHub requiring a PAT (and not the same password used on the website) this can be a hassle, since the PAT is not configurable and has to be copy/pasted.\nRstudio is generating that pop-up, but the frequency is controlled by a gitconfig variable. The default without configuration is 15m so if we don’t run a git command for 15m it expires the cache and pops up again. We can make it show up less with:\ngit config --global credential.helper 'cache --timeout=10000000'\nThat means that the cache won’t expire for 10,000,000 seconds (which is 16 weeks).\nThanks to https://happygitwithr.com/https-pat.html#store-credentials-through-organic-git-use and the Rstudio community forums for helping me with that https://community.rstudio.com/t/git-user-pass-pop-ups-when-using-git-in-terminal-window/161213\n\n\nA.1.4 Shortcut to find GitHub URL\nA short cut to find the URL is git remote -v\n~/workspace/i320d-testing2024$ git remote -v\norigin  https://github.com/jameshowison/i320d-testing2024.git (fetch)\norigin  https://github.com/jameshowison/i320d-testing2024.git (push)\nAnd then copy the URL (with or without the .git at the end). On windows you may need to use the right-click context menu for copy and paste in a terminal.\n\n\nA.1.5 git commit throws me into a weird mode\nIf you type git commit just on its own rather than git commit -m \"Some message\" you will see something like this:\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# On branch master\n# Your branch is up to date with 'origin/master'.\ngit needs a commit message. When you don’t provide one it throws you into a text editor, expecting you to type a small novel.\nThe editor that you go into by default is the vi or vim editor. It can be confusing because it has multiple modes (ie typing doesn’t always just produce text).\nThe best option is to:\n\nHit esc twice: Esc Esc\n\nType :q! and hit Enter\nRedo your commit using `git commit -m “Some message”\n\nSee https://stackoverflow.com/questions/11828270/how-do-i-exit-vim\nThe option below does not work in Rstudio because Rstudio captures the Ctrl key commands\nYou can also configure git to use another editor: https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-editing-commit-messages\nFor example, the nano editor is easier to use. You can set that run running\ngit config --global core.editor \"nano\"\nIn nano we can type a commit message as usual. The bottom of the screen shows commands. Nano uses the ^ symbol to represent the Ctrl key. We have to save the file and then exit Nano. So to save the message and return to the commandline we use:\nCtrl + O\nThen:\nCtrl + X",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Skills faq</span>"
    ]
  },
  {
    "objectID": "skills/skills_faq.html#sec-faq-home-git-folder",
    "href": "skills/skills_faq.html#sec-faq-home-git-folder",
    "title": "Appendix A — Skills faq",
    "section": "A.2 I accidentally made my home folder a git repo",
    "text": "A.2 I accidentally made my home folder a git repo\nIf you are in your home folder but git status doesn’t give a “fatal error” then you’ve accidentially made your home folder into a git repository (probably by running git init in that folder).\nIn this case we need to undo this. We can’t delete our home folder, because it has everything else inside it. We have to somehow tell the computer that the home folder should not be a git repo. Happily, then only thing that makes it a git repo is that it has a .git folder inside it. You can confirm by running:\nls -lah\nThe -a flag to ls makes it show all files and folders, even the hidden ones that start with a dot.\nTo fix this we could just delete the .git folder but we might lose data that way (if we had already added work to that repo). So safest thing is to make a new folder inside our home folder, and then move the .git there.\nmkdir backup_home_git\nmv ./.git ./backup_home_git\nNow you could cd backup_home_git and use that folder as a git repo. But probably you are about to clone from github (in which case a new folder will be created) or you are about to use git init to create a new local repo (in which case you should create a folder first, cd into it, then run git init.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Skills faq</span>"
    ]
  },
  {
    "objectID": "skills/skills_faq.html#sec-gitviz",
    "href": "skills/skills_faq.html#sec-gitviz",
    "title": "Appendix A — Skills faq",
    "section": "A.3 Vizualizing git trees (aka git viz)",
    "text": "A.3 Vizualizing git trees (aka git viz)\nIn this course we are using a command that I usually call “git viz” for short:\ngit log --oneline --abbrev-commit --all --graph --decorate --color\nInstructions for creating the convenient alias git viz are in Git basic workflow.\nThis produces reasonably readable graphs (especially for the teaching repos used in this course).\nThey look like this:\njlh5498@educcomp04:~/github_repos/i320_test3,,\\n git viz\n*   d8ab2c1 (HEAD -&gt; main, origin/main, origin/HEAD) Merge pull request #1 from jameshowison/new-feature\n|\\  \n| * ffb601d (origin/new-feature, new-feature) added extra\n|/  \n* f256ee7 Added line to README\n* 093fb0c Initial commit\nOr as an image (with coloring as on Edupod Rstudio):\n\n\n\nImage showing output of git viz command shown as text above\n\n\nYou can read a little more about how to read these graphs here https://stackoverflow.com/questions/22313343/git-graph-what-do-the-lines-and-asteriks-denote\nLong story short:\n\nThe asterisk characters (*) show a single commit\nThe lines formed with characters like (| \\ /) help us follow which branches a commit was on.\nThe words in parens show branch names, and can include the names of remotes (e.g., origin/new-feature means the new-feature branch on the origin remote)\n\nIt is a long command, so you can either keep it handy in a pastebin (I use Typinator) or you can register it as a command alias for git itself:\ngit config --global alias.viz 'log --oneline --abbrev-commit --all --graph --decorate --color'\nSo then you can just type:\ngit viz",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Skills faq</span>"
    ]
  },
  {
    "objectID": "skills/skills_faq.html#seeing-a-merge-conflict-using-git-log",
    "href": "skills/skills_faq.html#seeing-a-merge-conflict-using-git-log",
    "title": "Appendix A — Skills faq",
    "section": "A.4 Seeing a merge conflict using git log",
    "text": "A.4 Seeing a merge conflict using git log\nIn one assignment students have to submit a repo showing a resolved merge conflict when accepting a PR. This raised the question of whether I could see this looking at the repo. Student questions helped me figure that our, leading me to https://stackoverflow.com/questions/15277708/how-do-you-see-show-a-git-merge-conflict-resolution-that-was-done-given-a-mer which highlighted this as an issue in presenting merge conflicts for review. The most recent answer, led me to discover a new feature in git\ngit log --remerge-diff\nThis enables one to see the files with the &lt;&lt;&lt;&lt;&lt;&lt; type conflict markers shown.\n\nrm -rf merge-conflict-example\ngit clone https://github.com/jameshowison/merge-conflict-example.git\ncd merge-conflict-example\ngit log -1 --skip 1 --remerge-diff\n## Cloning into 'merge-conflict-example'...\n## commit 50911dc2232965238790ad8ca3fdcabe56b41639\n## Merge: 57c1c6c 99b328f\n## Author: pablo-carbajo1 &lt;99198265+pablo-carbajo1@users.noreply.github.com&gt;\n## Date:   Thu Mar 2 18:06:57 2023 -0600\n## \n##     Merge branch 'main' into patch-1\n## \n## diff --git a/animals.txt b/animals.txt\n## remerge CONFLICT (content): Merge conflict in animals.txt\n## index f9970b6..f07b36e 100644\n## --- a/animals.txt\n## +++ b/animals.txt\n## @@ -1,8 +1,5 @@\n## -&lt;&lt;&lt;&lt;&lt;&lt;&lt; 57c1c6c (Update animals.txt)\n##  lion Contributor B\n## -=======\n##  lion contributor A\n## -&gt;&gt;&gt;&gt;&gt;&gt;&gt; 99b328f (Merge pull request #4 from lisahyuniko/patch-1)\n##  tiger \n##  leopard \n##  turtle",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Skills faq</span>"
    ]
  },
  {
    "objectID": "skills/skills_faq.html#sec-fetch-pr",
    "href": "skills/skills_faq.html#sec-fetch-pr",
    "title": "Appendix A — Skills faq",
    "section": "A.5 Gathering the code as though the PR had been accepted",
    "text": "A.5 Gathering the code as though the PR had been accepted\nSometimes it is useful to be able to work with the code that would result if the PR was accepted, but without actually accepting the PR. Sometimes this is called “previewing the PR”. It is useful when working with PRs from others, and can also be useful when working on our own branches, but where we don’t want to merge that branch to main (which is a difficult operation to undo).\nOn GitHub (and other online repositories like Gitlab or BitBucket) we can do this because the pull requests are added to the online repository, somewhat like branches. We can access these using the git fetch command pointing to the pull part of the repository.\ngit fetch origin pull/123/head:pr-123\ngit checkout pr-123\nThis obtains the code as though the PR had been accepted and then makes a new local branch that we can work with. Notice, though, that thje new local branch is not the same branch that the PR is for … it is a local copy. Therefore we would not push that new local branch back up to GitHub, preferring to work with the PR itself (and here is documentation about how to allow others to edit your PRs).",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Skills faq</span>"
    ]
  },
  {
    "objectID": "skills/skills_faq.html#sec-history",
    "href": "skills/skills_faq.html#sec-history",
    "title": "Appendix A — Skills faq",
    "section": "A.6 Removing something from history entirely",
    "text": "A.6 Removing something from history entirely\nThe purpose of git is to retain all of your history, so that you can go back to any point in development and recover (as well as experiment while not breaking the mainline of development). Simultaneously when we are working in the open that means that anyone can view any file that was ever in a repository. With that in mind it is not too surprising that if you accidentally add something to git and then push it to github you can have trouble putting “the genie back in the bottle.”\nLet’s say that we create a repo and add a README, then add a SPECIAL_SECRET file with the password “swordfish” in it. Note that I use git add * below which is a very common way to accidentally add a problematic file, try to get into the habit of adding files one by one.\n$ cd practice_history_edit/\ngit init\nInitialized empty Git repository in /Users/howison/Documents/UTexas/Courses/PeerProduction/practice_history_edit/.git/\nvi README\ngit status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n        README\n\nnothing added to commit but untracked files present (use \"git add\" to track)\ngit add README\ngit commit -m \"now we have a README\"\n[main (root-commit) f4878b0] now we have a README\n 1 file changed, 1 insertion(+)\n create mode 100644 README\nvi SPECIAL_SECRET\ngit add *\ngit commit -m \"whoops added secret\"\n[main 018f6b5] whoops added secret\n 1 file changed, 1 insertion(+)\n create mode 100644 SPECIAL_SECRET\ngit viz\n* 018f6b5 (HEAD -&gt; main) whoops added secret\n* f4878b0 now we have a README\nNow I’ll go ahead and make one more edit to README\nvi README\ngit add READMEgit commit -m \"README edit 2\"[main 4d51f91] README edit 2\n 1 file changed, 1 insertion(+)\ngit viz\n* 4d51f91 (HEAD -&gt; main) README edit 2\n* 018f6b5 whoops added secret\n* f4878b0 now we have a README\nls\nREADME         SPECIAL_SECRET\ncat SPECIAL_SECRET\nswordfish\nOk, so we realize that the password file got into git and we swing into action and delete it from git.\ngit rm SPECIAL_SECRET\nrm 'SPECIAL_SECRET'\ngit commit -m \"phew removed it, or did we\"\n[main ff229ba] phew removed it, or did we\n 1 file changed, 1 deletion(-)\n delete mode 100644 SPECIAL_SECRET\nls\nREADME\nSo now the file is not there. Or rather it is not in our working directory. The problem is that it is still inside out .git folder and we can get it out easily.\ngit checkout HEAD~1\nNote: checking out 'HEAD~1'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n  git checkout -b &lt;new-branch-name&gt;\n\nHEAD is now at 4d51f91... README edit 2\nlsREADME         SPECIAL_SECRET\ncat SPECIAL_SECRET\nswordfish\nHere I just used git checkout HEAD~1 which goes one commit back in time, to before we deleted the SPECIAL_SECRET file. Even if we were far ahead, or over on other branches etc, I could always get back by asking to see the code just after the commit that added the file git checkout 018f6b5 (btw, to get out of DETACHED HEAD state just checkout the branch again, we’re working on main so it would be git checkout main).\nSo using git rm removes a file from the working directories but it doesn’t remove it from the git history. And that’s a sensible thing, usually you want to be able to go back in time. But sometimes you want to remove something from the history entirely. You can do that using the approaches outlined by Github here: Removing sensitive data from a repository\nThe process is a bit complex (as it should be) but simplified with the bfg tool, as described at the link above. First you have to download the tool (which requires Java to run) then follow the instructions step by step.\nKeep in mind that if you had pushed this sensitive info to a repo on github and others had then forked or cloned it then that info is not going to be deleted from the clones, so passwords should definitely be changed and you should ask everyone to delete forks/clones and start again.\nThere are a set of approaches to avoid uploading sensitive data. A good starting point is discipline around using .gitignore which will prevent adding files that should not be added. Another approach is to become familiar with using environment variables to hold secrets. This is an evolving area, so ask others in your organization how they handle secrets (usually access credentials) when using git. One recent approach (specific to GitHub is https://docs.github.com/en/actions/security-guides/encrypted-secrets)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Skills faq</span>"
    ]
  },
  {
    "objectID": "skills/glossary.html",
    "href": "skills/glossary.html",
    "title": "Appendix B — Glossary of Commands",
    "section": "",
    "text": "B.1 Git",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Glossary of Commands</span>"
    ]
  },
  {
    "objectID": "skills/glossary.html#git",
    "href": "skills/glossary.html#git",
    "title": "Appendix B — Glossary of Commands",
    "section": "",
    "text": "git init initializes a new Git repository in the current working directory.\n\ngit init [DIRECTORY] like above, but in the specified directory.\n\ngit add [FILE] tracks changes in the specified file, but does not commit those changes.\n\ngit add . tracks changes in all files in the current directory and all subdirectories. Be careful not to track changes you didn’t intend!\n\ngit commit -m \"[MESSAGE]\" commits all tracked changes to the repository with a specified message. Remember the quotes around the message!\n\ngit commit is like the above, but uses the default text editor (probably vim). You can exit that editor by typing :cq and hitting enter. If that fails, you may want to kill your terminal and restart.\n\ngit status shows the state Git thinks the repository is currently in. By default it shows what branch you’re on, staged and unstaged changes, and untracked files.\ngit log shows the history of the git repository. If the history is longer than your current terminal screen, you can navigate history with the arrow keys. Hit q to quit.\n\ngit viz is an alias we made for this class that shows the commit history in an easier-to-read format.\n\ngit config manages local (for one repository) and global (for all repositories on your computer) configuration. These can change many aspects of how Git functions. Most functionality offered by this command is not part of this class.\n\ngit config --global alias.[NAME] \"[COMMAND]\" creates a new global subcommand for git that executes the passed command named NAME. This is how we made git viz.\n\ngit diff [COMMIT_1] [COMMIT_2] shows the changes from COMMIT_1 to COMMIT_2.\n\ngit diff HEAD~1 HEAD shows the differences from HEAD~1 to HEAD\ngit diff HEAD HEAD~1 shows the inverse from the above, so all changes are shown as negated (adds become removes and vice versa).\n\ngit checkout [COMMIT] unloads the currently-loaded commit and loads the specified one. COMMIT can may be a tag, like the name of a branch (main) or a commit hash.\n\ngit checkout - checks out the previously-checked out commit/branch.\ngit checkout -b [BRANCH] checks out BRANCH, or creates one if it did not already exist.\n\ngit branch [BRANCH] creates a new branch called BRANCH.\n\ngit branch lists all branches in the repository.\ngit branch -d [BRANCH] deletes the branch BRANCH, if it has already fully merged.\n\ngit branch -D [BRANCH] forces BRANCH to be deleted, regardless of if it has been merged.\n\n\ngit restore --staged [FILE] unstages all changes for FILE, meaning git commit won’t commit changes to that file.\n\ngit restore [FILE]\n\ngit revert [COMMIT] --no-edit tries to revert any changes COMMIT made to the repository and automatically creates a new commit. The command will let you know if it was unable to automatically revert the commit. The --no-edit indicates you don’t want to write a custom commit message for the revert commit.\ngit merge [BRANCH] tries to apply all commits from when [BRANCH] diverged from the current branch until the most recent commit on that branch. If there are merge conflicts, you need to resolve those commit-by-commit and enter git merge --continue until it completes. Does not edit the target branch (the one you specify). So if you are on a branch named main and run git merge docs, Git will try to add all of the missing commits from docs to main, but leave docs untouched.\n\ngit merge --abort aborts the current merge process. This is useful if you’ve accidentally started a merge, or otherwise need to exit unexpectedly.\n\n\n\nB.1.1 Referencing commits\n\nHEAD is a special reference that indicates the current commit you are at in the repository. This changes when you git checkout, git commit, or do anything that changes\nHEAD~[N] references N commits before HEAD. So HEAD~0 is equivalent to HEAD, HEAD~1 is the commit before HEAD, HEAD~2 is two commits before HEAD, and so on.\nThe ~N format also works for branches, so main~3 references three commits before the most recent commit to the main branch.\nYou can always reference a commit by its hash, the letters and numbers to the right of commit messages in git viz and git log. If manually typing, you just need the first four characters, so if git log shows 879798e you can just type 8797, but copying is usually easier.\n\n\n\nB.1.2 Git Config\nYou’ll want to use these so git commit doesn’t complain about you not having set these up. If you intend to use different names/emails in Git repositories on the same computer, omit --global and make sure to run these from the repository you want to use these in. When choosing which email to use, think of it as “If someone had a question about this change, how would I want them to contact me?”\n\ngit config --global user.name \"Your Name\" sets the human-readable name in your git commits in all repositories on your computer to that name.\ngit config --global user.email \"you@example.com\" does the same, but for your email.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Glossary of Commands</span>"
    ]
  },
  {
    "objectID": "skills/glossary.html#command-line-tools",
    "href": "skills/glossary.html#command-line-tools",
    "title": "Appendix B — Glossary of Commands",
    "section": "B.2 Command Line Tools",
    "text": "B.2 Command Line Tools\nFor many of these commands, if you type --help after the command, it will print out detailed documentation.\n\npwd, shows the path to your current working directory.\nls, lists the contents of your current directory.\ncd [DIRECTORY], changes the directory you’re in.\n\ncd .., moves to the parent directory of the current working directory.\nPaths starting with / indicate absolute paths rather than ones relative to your working directory.\ncd - moves to the directory you were previously in.\n\nmkdir, makes a new directory.\ntouch, creates a new (empty) file.\n\nThe command has other uses, but those aren’t part of this class.\n\nrm, removes files and directories.\n\n\nB.2.1 Terminal Advice\n\nAccessing previous commands - You can navigate through your previous commands by hitting the up and down arrow keys.\nClearing your terminal - You can clear your terminal with CTRL+L or by entering the command clear.\n\n\n\nB.2.2 Optional Commands\nThese are not required for this course, but you might find them useful.\n\nprintf \"1. This is the first line\\n2. This is the second line.\" &gt;&gt; file.txt appends text to a file, creating the file if it does not already exist. If you search online you may also see echo instead of printf, but echo can’t easily write multiple lines at once.\nclear clears your terminal of all input.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Glossary of Commands</span>"
    ]
  }
]