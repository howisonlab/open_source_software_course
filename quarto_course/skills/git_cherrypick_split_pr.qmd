# Split a Pull Request {#sec-cherrypick}

> Hey, thanks! Some of this looks great, but can you split this up into separate PRs?

Sometimes maintainers like part of the work that a contributor has done, but they don't like all of it.

In this situation, a maintainer might respond to a pull request by asking you to split your contributions into a few different pull requests. This can help keep different contributions separate, smaller, and make them easier to discuss. You might remember the importance of small layers from the week on Coordination and discussion of the Superposition paper in @sec-coordination.

One common cause of mixing up different pieces of work in one pull request is forgetting to change branches in your repo. If you add additional commits to that branch then they will get added to the pull request. Remember, a pull request says, "Please come to this repo and get everything on this branch." So it's not the same as including some commits in a zip file and mailing them, it's more like placing things into a particular spot (like a mailbox or dead-drop in a spy movie), and telling people to pick them up from there.

So you can always add additional things before the person comes to pick them up.

This is useful because if there is a conversation around the pull request then you can easily update things. For example, if someone said "Please fix a typo or pull from upstream before we consider your pull request," you'd be able to do so without opening another PR (just add, commit, push to your branch on your fork and the PR is updated).

However, it is an issue if you *accidentally* add new commits to a branch before a pull request is accepted. Now your pull request has two sets of commits: the first set you meant to include and the second set you didn't. This mistake is particularly easy to make if you are developing on the `main` branch in your fork (which you shouldn't do), but also happens if you are have more than one contribution that you are working on, as when you are doing something else while waiting for a PR to be accepted. If you've accidentally added too many files to your pull request---something that is easy to do if you use `git add *` or some variant---you'll also find yourself needing to remove content from your PR.

This is where the delightfully named `git cherry-pick` can help us.

## Split before submit

Things would be better if you had created a new branch for the first set of commits, then a second branch for your second set of commits, never adding either set to your main branch and following the "always work on a (short-lived) feature branch" rule. Then each set of commits would be "sent" through a different pull request.

In other words we would be in good position to submit two separate pull requests:

```{mermaid}
gitGraph
  commit id: "main1"
  commit id: "main2"
  commit id: "branch here" type: HIGHLIGHT
  branch first_set
  commit id: "apple1"
  commit id: "apple2"
  checkout main
  branch second_set
  commit id: "orange1"
  commit id: "orange2"
```

But instead we have everything mixed up together on one branch.

```{mermaid}
gitGraph
  commit id: "main1"
  commit id: "main2"
  commit id: "branch here" type: HIGHLIGHT
  branch all_mixed_up
  commit id: "apple1"
  commit id: "orange1"
  commit id: "apple2"
  commit id: "orange2"
```

We might have forgotten to branch at all, and so have everything stuck on `main`

```{mermaid}
gitGraph
  commit id: "main1"
  commit id: "main2"
  commit id: "branch here" type: HIGHLIGHT
  commit id: "apple1"
  commit id: "orange1"
  commit id: "apple2"
  commit id: "orange2"
```

### LearnGitBranching exercise

We can see an example of the overall workflow for splitting a PR using the LearnGitBranching Visualizer, I have created a level called [Split Pull Request](https://learngitbranching.js.org/?gist_level_id=f7b4b63960ed80fa9a76728d853f2546).

### Cherry-pick via commandline git

You can see a situation like this in this repo on GitHub. Bring that to your working space with:

```sh
cd ~
git clone https://github.com/jameshowison/i320d-needs-split.git
cd i320d-needs-split
```

If you then run our git viz command (see @sec-gitviz for how to set up a short cut for that)

You will see both our apple and orange edits all together on the `main` branch.

``` sh
jlh5498@educcomp04:~/github_repos/i320d-needs-split$ git viz
* c70df5a (HEAD -> main) orange2
* 423ad05 apple2
* 4f1fe99 orange1
* 91abdfb apple1
* 8e35b12 branch here
* ea4d580 main1
* 252ff3f Initial commit
```

We eventually want this to look like our first graph above, with two new branches (apple_branch and orange_branch):

``` sh
jlh5498@educcomp04:~/github_repos/i320d-needs-split$ git viz
* 09d5482 (HEAD -> orange_branch) orange2
* 2137500 orange1
| * c8fd64d (apple_branch) apple2
| * 1a5ac49 apple1
|/  
* 158f2c4 (main) branch here
* 96d65c3 main2
* 7036c11 main 1
* 252ff3f Initial commit
```

To get there we will take three steps:

1.  Create a new branch, specifying the starting point
2.  Move the relevant commits to the new branch
3.  Push to the fork, create a new pull request

``` sh
git checkout -b apple_branch 8e35b12
```

The `8e35b12` here is the commit id of the point at which we want the branch to start. Until now when we've created a branch we have done so while sitting at `HEAD` but git allows us to create a branch back in time. Git does this by adding metadata to the earlier commit (labeling it with a branch label).

Then we can move the commits using `git cherry-pick`. Note that this doesn't *move* them from the `main` branch, but creates new commits with the same content. This is very much like copying files from one directory into another directory (except we are moving commits from a branch to another branch).

``` sh
git cherry-pick 91abdfb 423ad05
```

Again the strings `91abdfb` and `423ad05` identify specific commits. We can provide a list (like above), just one, and it is also possible to provide a range if you want a full sequence of commits.

After the cherry-pick we see:

``` sh
jlh5498@educcomp04:~/github_repos/i320d-needs-split$ git cherry-pick 91abdfb 423ad05
[apple_branch 9ca623a] apple1
 Date: Wed Mar 1 15:31:38 2023 -0600
 1 file changed, 1 insertion(+)
[apple_branch 2b82f41] apple2
 Date: Wed Mar 1 15:31:38 2023 -0600
 1 file changed, 1 insertion(+)
jlh5498@educcomp04:~/github_repos/i320d-needs-split$ git viz
* 2b82f41 (HEAD -> apple_branch) apple2
* 9ca623a apple1
| * c70df5a (origin/main, origin/HEAD, main) orange2
| * 423ad05 apple2
| * 4f1fe99 orange1
| * 91abdfb apple1
|/  
* 8e35b12 branch here
* ea4d580 main1
* 252ff3f Initial commit
```

We can then use `git push` as normal to push the `apple_branch` up to the fork and make a pull request.

::: callout-note
Moving around commits using cherry-pick shows us why it is so important to understand commits as full copies of the state of the working directory, as full snapshots of our files. If commits were just the changes (just a bunch of `diffs`) then we would have to apply them in the order they were created, otherwise we'd get nonsense results.

But because commits are full copies of everything, we can move them around without any logical problems. Think of reordering the trays with the paper planes we used in the first class.

In fact, all that git is doing is re-writing the parent for each commit.

And branches are just like little post-its added to some commits, they are just metadata pointers. Neat, isn't it?

See more about this on the GitHub blog <https://github.blog/2020-12-17-commits-are-snapshots-not-diffs/>
:::

### Exercises

#### Individual Exercises

1.  Now you work to get the `orange_branch` organized.

#### Group Exercise

Groups of 3. Nominate *Maintainer*, *Contributor A*, and *Contributor B*.

1.  *Maintainer* creates a repo on Github.
2.  *Maintainer* adds 2 commits and pushes.
3.  *Contributor A* and *Contributor B* fork and clone (and add upstream).
4.  *Contributor A* and *Contributor B* create a feature branch called `will_need_split`.
5.  *Contributor A* and *Contributor B* add four commits of four files on `will_need_split`
6.  *Contributor A* and *Contributor B* create a pull request to `upstream` from their `will_need_split` branch (including all four commits).
7.  *Maintainer* rejects the pull request, closing it and commenting "please split this up" (and direct which files go together, probably 2 in each.)
8.  *Contributor A* and *Contributor B* follow procedure above to end up with two new branches `split_branch_1` and `split_branch_2` send through separate pull requests with only the right commits/files in them.
9.  *Maintainer* eventually accepts each of the four split up pull requests.

<!-- ### Dealing with remaining commits -->

<!-- Remember when we `git cherry-pick` to move a commit, we don't actually move it we create a copy (learngitbranching shows this by creating new commits called `C3'` and `C4'` (to distinguish from `C3` and `C4`). -->

<!-- You can see this with the middle block of commits here (after the orange_branch is created). They are on main. -->

<!-- ``` sh -->
<!-- * 170afe6 (HEAD -> orange_branch) orange2 -->
<!-- * c7af009 orange1 -->
<!-- | * 2b82f41 (apple_branch) apple2 -->
<!-- | * 9ca623a apple1 -->
<!-- |/   -->
<!-- | * c70df5a (origin/main, origin/HEAD, main) orange2 -->
<!-- | * 423ad05 apple2 -->
<!-- | * 4f1fe99 orange1 -->
<!-- | * 91abdfb apple1 -->
<!-- |/   -->
<!-- * 8e35b12 branch here -->
<!-- * ea4d580 main1 -->
<!-- * 252ff3f Initial commit -->
<!-- ``` -->

<!-- So we have to consider what to do about the extra commits left on `main`. This is going to depend on a few things. Do you have additional commits on `main` that you haven't distributed among new branches? Do you want `main` to exactly reflect the history of `main` on `upstream`? How tolerant are you of "messy history"? It's also going to depend on whether `main` had been pushed up and whether others might have built on top of it. -->

<!-- There are many options, here are two: -->

<!-- 1.  Revert the commits that you "moved" to the branches. `git revert` creates "opposite" commits, that undo any changes. So if you lay a revert commit on top of a commit then the content is as though the commit was never made. But they stay visible in the git history -->
<!-- 2.  Using `git reset -hard`, create a new branch from your branching point, then rename it to `main`, orphaning your current main. -->

<!-- If you had already shared these then you really only have the first option, as then if others started building on your work they will be ok. If you use `reset -hard` then this can cause big problems in other people's repositories (as the history now differs in a way that git cannot recover). -->

<!-- #### Using revert -->

<!-- First I created a copy of the repo, `practice_split_revert/`, so I could show both options. Then I switched to the `main` branch in that copy. -->

<!-- ``` sh -->
<!-- cd .. -->
<!-- cp -r i320d-needs-split i320d-needs-split-revert -->
<!-- cd i320d-needs-split-revert/ -->
<!-- git checkout main -->
<!-- ``` -->

<!-- Then I used a range expression (the `..`) with revert to revert the set of four commits on `main`. Note that the double dot range syntax used like this is left exclusive (i.e. you have to go back one further than the first you want). I also had to provide four commit messages, one for each of the reverting commits. -->

<!-- ``` sh -->
<!-- git revert 8e35b12..c70df5a -->
<!-- [main f195843] Revert "orange2" -->
<!--  1 file changed, 1 deletion(-) -->
<!-- [main 88fbee6] Revert "apple2" -->
<!--  1 file changed, 1 deletion(-) -->
<!-- [main 8513495] Revert "orange1" -->
<!--  1 file changed, 1 deletion(-) -->
<!-- [main eb9d80e] Revert "apple1" -->
<!--  1 file changed, 1 deletion(-) -->
<!-- ``` -->

<!-- ::: callout-warning -->
<!-- When using the range operator `..` it is left-exclusive, right-inclusive. This means you have to start one commit before the ones you want to include. So here I start with the "branch here" commit `8e35b12` even though I not reverting that commit. -->
<!-- ::: -->

<!-- ::: callout-note -->
<!-- You have to provide a commit message for each revert commit. By default to get those git will push you into the `vi` editor, which can be disorientating. See section in FAQ: @sec-vim. To accept the default commit messages, I hit <kbd>Esc</kbd> <kbd>Esc</kbd> <kbd>:wq</kbd> <kbd>Enter</kbd> -->
<!-- ::: -->

<!-- ``` sh -->
<!-- git viz -->
<!-- ``` -->

<!-- ``` sh -->
<!-- * eb9d80e (HEAD -> main) Revert "apple1" -->
<!-- * 8513495 Revert "orange1" -->
<!-- * 88fbee6 Revert "apple2" -->
<!-- * f195843 Revert "orange2" -->
<!-- * c70df5a (origin/main, origin/HEAD) orange2 -->
<!-- * 423ad05 apple2 -->
<!-- * 4f1fe99 orange1 -->
<!-- * 91abdfb apple1 -->
<!-- | * 170afe6 (orange_branch) orange2 -->
<!-- | * c7af009 orange1 -->
<!-- |/   -->
<!-- | * 2b82f41 (apple_branch) apple2 -->
<!-- | * 9ca623a apple1 -->
<!-- |/   -->
<!-- * 8e35b12 branch here -->
<!-- * ea4d580 main1 -->
<!-- * 252ff3f Initial commit -->
<!-- ``` -->

<!-- This is hard to love (as everything got uglier with the addition of the reverts) but it does definite explain what is intended and ensure that anyone working from `main` can continue to do so. -->

<!-- #### git reset --hard -->

<!-- Git reset can neaten things up, but only if you haven't already pushed to GitHub. -->

<!-- Again, I create a copy of the repo -->

<!-- ``` sh -->
<!-- cd .. -->
<!-- cp -r i320d-needs-split i320d-needs-split-reset -->
<!-- cd i320d-needs-split-reset/ -->
<!-- git checkout main -->
<!-- git viz -->
<!-- ``` -->

<!--     * 170afe6 (HEAD -> orange_branch) orange2 -->
<!--     * c7af009 orange1 -->
<!--     | * 2b82f41 (apple_branch) apple2 -->
<!--     | * 9ca623a apple1 -->
<!--     |/   -->
<!--     | * c70df5a (origin/main, origin/HEAD, main) orange2 -->
<!--     | * 423ad05 apple2 -->
<!--     | * 4f1fe99 orange1 -->
<!--     | * 91abdfb apple1 -->
<!--     |/   -->
<!--     * 8e35b12 branch here -->
<!--     * ea4d580 main1 -->
<!--     * 252ff3f Initial commit -->

<!-- Now we use `git reset --hard` to force HEAD on `main` back to `8e35b12`. That disconnects the four unwanted commits (I *think* they aren't actually gone from .git folder yet, but they could be deleted any time as they aren't connected to anything, they don't show up in the graph or the log). -->

<!-- ``` sh -->
<!-- git reset --hard 8e35b12 -->
<!-- ``` -->

<!--     HEAD is now at 8e35b12  -->

<!-- That seems neater, but keep in mind that if you'd pushed `main` to github while those commits were there, anyone else who had built on your repo would have lots of trouble. In fact if you do this with the repos above (which have already been pushed to GitHub then the four commits don't disappear, they are still tagged with `origin/main` because they are on the remote. -->

<!-- The `revert` approach means messier history, but has the advantage that it doesn't disconnect anyone else. -->
